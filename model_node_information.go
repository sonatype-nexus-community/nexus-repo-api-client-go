/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.84.0-03.

API version: 3.84.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the NodeInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeInformation{}

// NodeInformation struct for NodeInformation
type NodeInformation struct {
	NodeId *string `json:"nodeId,omitempty"`
}

// NewNodeInformation instantiates a new NodeInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInformation() *NodeInformation {
	this := NodeInformation{}
	return &this
}

// NewNodeInformationWithDefaults instantiates a new NodeInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInformationWithDefaults() *NodeInformation {
	this := NodeInformation{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *NodeInformation) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInformation) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *NodeInformation) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *NodeInformation) SetNodeId(v string) {
	o.NodeId = &v
}

func (o NodeInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	return toSerialize, nil
}

type NullableNodeInformation struct {
	value *NodeInformation
	isSet bool
}

func (v NullableNodeInformation) Get() *NodeInformation {
	return v.value
}

func (v *NullableNodeInformation) Set(val *NodeInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInformation(val *NodeInformation) *NullableNodeInformation {
	return &NullableNodeInformation{value: val, isSet: true}
}

func (v NullableNodeInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


