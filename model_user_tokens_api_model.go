/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

API version: 3.85.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the UserTokensApiModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserTokensApiModel{}

// UserTokensApiModel struct for UserTokensApiModel
type UserTokensApiModel struct {
	// Whether or not User Tokens feature is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Set user token expiration days (E.g., 1-999)
	ExpirationDays *int32 `json:"expirationDays,omitempty"`
	// Enable user tokens expiration
	ExpirationEnabled *bool `json:"expirationEnabled,omitempty"`
	// Additionally require user tokens for repository authentication
	ProtectContent *bool `json:"protectContent,omitempty"`
}

// NewUserTokensApiModel instantiates a new UserTokensApiModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTokensApiModel() *UserTokensApiModel {
	this := UserTokensApiModel{}
	return &this
}

// NewUserTokensApiModelWithDefaults instantiates a new UserTokensApiModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTokensApiModelWithDefaults() *UserTokensApiModel {
	this := UserTokensApiModel{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UserTokensApiModel) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensApiModel) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UserTokensApiModel) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UserTokensApiModel) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExpirationDays returns the ExpirationDays field value if set, zero value otherwise.
func (o *UserTokensApiModel) GetExpirationDays() int32 {
	if o == nil || IsNil(o.ExpirationDays) {
		var ret int32
		return ret
	}
	return *o.ExpirationDays
}

// GetExpirationDaysOk returns a tuple with the ExpirationDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensApiModel) GetExpirationDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpirationDays) {
		return nil, false
	}
	return o.ExpirationDays, true
}

// HasExpirationDays returns a boolean if a field has been set.
func (o *UserTokensApiModel) HasExpirationDays() bool {
	if o != nil && !IsNil(o.ExpirationDays) {
		return true
	}

	return false
}

// SetExpirationDays gets a reference to the given int32 and assigns it to the ExpirationDays field.
func (o *UserTokensApiModel) SetExpirationDays(v int32) {
	o.ExpirationDays = &v
}

// GetExpirationEnabled returns the ExpirationEnabled field value if set, zero value otherwise.
func (o *UserTokensApiModel) GetExpirationEnabled() bool {
	if o == nil || IsNil(o.ExpirationEnabled) {
		var ret bool
		return ret
	}
	return *o.ExpirationEnabled
}

// GetExpirationEnabledOk returns a tuple with the ExpirationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensApiModel) GetExpirationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpirationEnabled) {
		return nil, false
	}
	return o.ExpirationEnabled, true
}

// HasExpirationEnabled returns a boolean if a field has been set.
func (o *UserTokensApiModel) HasExpirationEnabled() bool {
	if o != nil && !IsNil(o.ExpirationEnabled) {
		return true
	}

	return false
}

// SetExpirationEnabled gets a reference to the given bool and assigns it to the ExpirationEnabled field.
func (o *UserTokensApiModel) SetExpirationEnabled(v bool) {
	o.ExpirationEnabled = &v
}

// GetProtectContent returns the ProtectContent field value if set, zero value otherwise.
func (o *UserTokensApiModel) GetProtectContent() bool {
	if o == nil || IsNil(o.ProtectContent) {
		var ret bool
		return ret
	}
	return *o.ProtectContent
}

// GetProtectContentOk returns a tuple with the ProtectContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensApiModel) GetProtectContentOk() (*bool, bool) {
	if o == nil || IsNil(o.ProtectContent) {
		return nil, false
	}
	return o.ProtectContent, true
}

// HasProtectContent returns a boolean if a field has been set.
func (o *UserTokensApiModel) HasProtectContent() bool {
	if o != nil && !IsNil(o.ProtectContent) {
		return true
	}

	return false
}

// SetProtectContent gets a reference to the given bool and assigns it to the ProtectContent field.
func (o *UserTokensApiModel) SetProtectContent(v bool) {
	o.ProtectContent = &v
}

func (o UserTokensApiModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserTokensApiModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExpirationDays) {
		toSerialize["expirationDays"] = o.ExpirationDays
	}
	if !IsNil(o.ExpirationEnabled) {
		toSerialize["expirationEnabled"] = o.ExpirationEnabled
	}
	if !IsNil(o.ProtectContent) {
		toSerialize["protectContent"] = o.ProtectContent
	}
	return toSerialize, nil
}

type NullableUserTokensApiModel struct {
	value *UserTokensApiModel
	isSet bool
}

func (v NullableUserTokensApiModel) Get() *UserTokensApiModel {
	return v.value
}

func (v *NullableUserTokensApiModel) Set(val *UserTokensApiModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTokensApiModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTokensApiModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTokensApiModel(val *UserTokensApiModel) *NullableUserTokensApiModel {
	return &NullableUserTokensApiModel{value: val, isSet: true}
}

func (v NullableUserTokensApiModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTokensApiModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


