/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.81.1-01.

API version: 3.81.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskTemplateXO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskTemplateXO{}

// TaskTemplateXO struct for TaskTemplateXO
type TaskTemplateXO struct {
	// e-mail for task notifications.
	AlertEmail *string `json:"alertEmail,omitempty"`
	// Indicates if the task would be enabled.
	Enabled bool `json:"enabled"`
	Frequency FrequencyXO `json:"frequency"`
	// The name of the task template.
	Name string `json:"name"`
	// Condition required to notify a task execution.
	NotificationCondition string `json:"notificationCondition"`
	// Additional properties for the task
	Properties *map[string]string `json:"properties,omitempty"`
	// The type of task to be created.
	Type string `json:"type"`
}

type _TaskTemplateXO TaskTemplateXO

// NewTaskTemplateXO instantiates a new TaskTemplateXO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskTemplateXO(enabled bool, frequency FrequencyXO, name string, notificationCondition string, type_ string) *TaskTemplateXO {
	this := TaskTemplateXO{}
	this.Enabled = enabled
	this.Frequency = frequency
	this.Name = name
	this.NotificationCondition = notificationCondition
	this.Type = type_
	return &this
}

// NewTaskTemplateXOWithDefaults instantiates a new TaskTemplateXO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskTemplateXOWithDefaults() *TaskTemplateXO {
	this := TaskTemplateXO{}
	return &this
}

// GetAlertEmail returns the AlertEmail field value if set, zero value otherwise.
func (o *TaskTemplateXO) GetAlertEmail() string {
	if o == nil || IsNil(o.AlertEmail) {
		var ret string
		return ret
	}
	return *o.AlertEmail
}

// GetAlertEmailOk returns a tuple with the AlertEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTemplateXO) GetAlertEmailOk() (*string, bool) {
	if o == nil || IsNil(o.AlertEmail) {
		return nil, false
	}
	return o.AlertEmail, true
}

// HasAlertEmail returns a boolean if a field has been set.
func (o *TaskTemplateXO) HasAlertEmail() bool {
	if o != nil && !IsNil(o.AlertEmail) {
		return true
	}

	return false
}

// SetAlertEmail gets a reference to the given string and assigns it to the AlertEmail field.
func (o *TaskTemplateXO) SetAlertEmail(v string) {
	o.AlertEmail = &v
}

// GetEnabled returns the Enabled field value
func (o *TaskTemplateXO) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *TaskTemplateXO) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *TaskTemplateXO) SetEnabled(v bool) {
	o.Enabled = v
}

// GetFrequency returns the Frequency field value
func (o *TaskTemplateXO) GetFrequency() FrequencyXO {
	if o == nil {
		var ret FrequencyXO
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *TaskTemplateXO) GetFrequencyOk() (*FrequencyXO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *TaskTemplateXO) SetFrequency(v FrequencyXO) {
	o.Frequency = v
}

// GetName returns the Name field value
func (o *TaskTemplateXO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TaskTemplateXO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TaskTemplateXO) SetName(v string) {
	o.Name = v
}

// GetNotificationCondition returns the NotificationCondition field value
func (o *TaskTemplateXO) GetNotificationCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationCondition
}

// GetNotificationConditionOk returns a tuple with the NotificationCondition field value
// and a boolean to check if the value has been set.
func (o *TaskTemplateXO) GetNotificationConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationCondition, true
}

// SetNotificationCondition sets field value
func (o *TaskTemplateXO) SetNotificationCondition(v string) {
	o.NotificationCondition = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *TaskTemplateXO) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTemplateXO) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TaskTemplateXO) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *TaskTemplateXO) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetType returns the Type field value
func (o *TaskTemplateXO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TaskTemplateXO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TaskTemplateXO) SetType(v string) {
	o.Type = v
}

func (o TaskTemplateXO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskTemplateXO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertEmail) {
		toSerialize["alertEmail"] = o.AlertEmail
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["frequency"] = o.Frequency
	toSerialize["name"] = o.Name
	toSerialize["notificationCondition"] = o.NotificationCondition
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *TaskTemplateXO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"frequency",
		"name",
		"notificationCondition",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskTemplateXO := _TaskTemplateXO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskTemplateXO)

	if err != nil {
		return err
	}

	*o = TaskTemplateXO(varTaskTemplateXO)

	return err
}

type NullableTaskTemplateXO struct {
	value *TaskTemplateXO
	isSet bool
}

func (v NullableTaskTemplateXO) Get() *TaskTemplateXO {
	return v.value
}

func (v *NullableTaskTemplateXO) Set(val *TaskTemplateXO) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskTemplateXO) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskTemplateXO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskTemplateXO(val *TaskTemplateXO) *NullableTaskTemplateXO {
	return &NullableTaskTemplateXO{value: val, isSet: true}
}

func (v NullableTaskTemplateXO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskTemplateXO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


