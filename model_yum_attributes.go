/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.81.1-01.

API version: 3.81.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the YumAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &YumAttributes{}

// YumAttributes struct for YumAttributes
type YumAttributes struct {
	// Validate that all paths are RPMs or yum metadata
	DeployPolicy *string `json:"deployPolicy,omitempty"`
	// Specifies the repository depth where repodata folder(s) are created
	RepodataDepth int32 `json:"repodataDepth"`
}

type _YumAttributes YumAttributes

// NewYumAttributes instantiates a new YumAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYumAttributes(repodataDepth int32) *YumAttributes {
	this := YumAttributes{}
	this.RepodataDepth = repodataDepth
	return &this
}

// NewYumAttributesWithDefaults instantiates a new YumAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYumAttributesWithDefaults() *YumAttributes {
	this := YumAttributes{}
	return &this
}

// GetDeployPolicy returns the DeployPolicy field value if set, zero value otherwise.
func (o *YumAttributes) GetDeployPolicy() string {
	if o == nil || IsNil(o.DeployPolicy) {
		var ret string
		return ret
	}
	return *o.DeployPolicy
}

// GetDeployPolicyOk returns a tuple with the DeployPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YumAttributes) GetDeployPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.DeployPolicy) {
		return nil, false
	}
	return o.DeployPolicy, true
}

// HasDeployPolicy returns a boolean if a field has been set.
func (o *YumAttributes) HasDeployPolicy() bool {
	if o != nil && !IsNil(o.DeployPolicy) {
		return true
	}

	return false
}

// SetDeployPolicy gets a reference to the given string and assigns it to the DeployPolicy field.
func (o *YumAttributes) SetDeployPolicy(v string) {
	o.DeployPolicy = &v
}

// GetRepodataDepth returns the RepodataDepth field value
func (o *YumAttributes) GetRepodataDepth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RepodataDepth
}

// GetRepodataDepthOk returns a tuple with the RepodataDepth field value
// and a boolean to check if the value has been set.
func (o *YumAttributes) GetRepodataDepthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepodataDepth, true
}

// SetRepodataDepth sets field value
func (o *YumAttributes) SetRepodataDepth(v int32) {
	o.RepodataDepth = v
}

func (o YumAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o YumAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeployPolicy) {
		toSerialize["deployPolicy"] = o.DeployPolicy
	}
	toSerialize["repodataDepth"] = o.RepodataDepth
	return toSerialize, nil
}

func (o *YumAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repodataDepth",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varYumAttributes := _YumAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varYumAttributes)

	if err != nil {
		return err
	}

	*o = YumAttributes(varYumAttributes)

	return err
}

type NullableYumAttributes struct {
	value *YumAttributes
	isSet bool
}

func (v NullableYumAttributes) Get() *YumAttributes {
	return v.value
}

func (v *NullableYumAttributes) Set(val *YumAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableYumAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableYumAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYumAttributes(val *YumAttributes) *NullableYumAttributes {
	return &NullableYumAttributes{value: val, isSet: true}
}

func (v NullableYumAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYumAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


