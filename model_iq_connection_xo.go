/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.81.1-01.

API version: 3.81.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IqConnectionXo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IqConnectionXo{}

// IqConnectionXo struct for IqConnectionXo
type IqConnectionXo struct {
	// Authentication method
	AuthenticationType string `json:"authenticationType"`
	// Whether to use Sonatype Repository Firewall
	Enabled *bool `json:"enabled,omitempty"`
	// Allow by default when quarantine is enabled and the IQ connection fails
	FailOpenModeEnabled *bool `json:"failOpenModeEnabled,omitempty"`
	// Credentials for the Sonatype Repository Firewall User
	Password *string `json:"password,omitempty"`
	// Additional properties to configure for Sonatype Repository Firewall
	Properties *string `json:"properties,omitempty"`
	// Show Sonatype Repository Firewall link in Browse menu when server is enabled
	ShowLink *bool `json:"showLink,omitempty"`
	// Seconds to wait for activity before stopping and retrying the connection. Leave blank to use the globally defined HTTP timeout.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
	// The address of your Sonatype Repository Firewall
	Url *string `json:"url,omitempty"`
	// Use certificates stored in the Nexus Repository Manager truststore to connect to Sonatype Repository Firewall
	UseTrustStoreForUrl *bool `json:"useTrustStoreForUrl,omitempty"`
	// User with access to Sonatype Repository Firewall
	Username *string `json:"username,omitempty"`
}

type _IqConnectionXo IqConnectionXo

// NewIqConnectionXo instantiates a new IqConnectionXo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIqConnectionXo(authenticationType string) *IqConnectionXo {
	this := IqConnectionXo{}
	this.AuthenticationType = authenticationType
	return &this
}

// NewIqConnectionXoWithDefaults instantiates a new IqConnectionXo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIqConnectionXoWithDefaults() *IqConnectionXo {
	this := IqConnectionXo{}
	return &this
}

// GetAuthenticationType returns the AuthenticationType field value
func (o *IqConnectionXo) GetAuthenticationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationType, true
}

// SetAuthenticationType sets field value
func (o *IqConnectionXo) SetAuthenticationType(v string) {
	o.AuthenticationType = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IqConnectionXo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IqConnectionXo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IqConnectionXo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFailOpenModeEnabled returns the FailOpenModeEnabled field value if set, zero value otherwise.
func (o *IqConnectionXo) GetFailOpenModeEnabled() bool {
	if o == nil || IsNil(o.FailOpenModeEnabled) {
		var ret bool
		return ret
	}
	return *o.FailOpenModeEnabled
}

// GetFailOpenModeEnabledOk returns a tuple with the FailOpenModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetFailOpenModeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FailOpenModeEnabled) {
		return nil, false
	}
	return o.FailOpenModeEnabled, true
}

// HasFailOpenModeEnabled returns a boolean if a field has been set.
func (o *IqConnectionXo) HasFailOpenModeEnabled() bool {
	if o != nil && !IsNil(o.FailOpenModeEnabled) {
		return true
	}

	return false
}

// SetFailOpenModeEnabled gets a reference to the given bool and assigns it to the FailOpenModeEnabled field.
func (o *IqConnectionXo) SetFailOpenModeEnabled(v bool) {
	o.FailOpenModeEnabled = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *IqConnectionXo) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *IqConnectionXo) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *IqConnectionXo) SetPassword(v string) {
	o.Password = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *IqConnectionXo) GetProperties() string {
	if o == nil || IsNil(o.Properties) {
		var ret string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetPropertiesOk() (*string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *IqConnectionXo) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given string and assigns it to the Properties field.
func (o *IqConnectionXo) SetProperties(v string) {
	o.Properties = &v
}

// GetShowLink returns the ShowLink field value if set, zero value otherwise.
func (o *IqConnectionXo) GetShowLink() bool {
	if o == nil || IsNil(o.ShowLink) {
		var ret bool
		return ret
	}
	return *o.ShowLink
}

// GetShowLinkOk returns a tuple with the ShowLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetShowLinkOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLink) {
		return nil, false
	}
	return o.ShowLink, true
}

// HasShowLink returns a boolean if a field has been set.
func (o *IqConnectionXo) HasShowLink() bool {
	if o != nil && !IsNil(o.ShowLink) {
		return true
	}

	return false
}

// SetShowLink gets a reference to the given bool and assigns it to the ShowLink field.
func (o *IqConnectionXo) SetShowLink(v bool) {
	o.ShowLink = &v
}

// GetTimeoutSeconds returns the TimeoutSeconds field value if set, zero value otherwise.
func (o *IqConnectionXo) GetTimeoutSeconds() int32 {
	if o == nil || IsNil(o.TimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.TimeoutSeconds
}

// GetTimeoutSecondsOk returns a tuple with the TimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutSeconds) {
		return nil, false
	}
	return o.TimeoutSeconds, true
}

// HasTimeoutSeconds returns a boolean if a field has been set.
func (o *IqConnectionXo) HasTimeoutSeconds() bool {
	if o != nil && !IsNil(o.TimeoutSeconds) {
		return true
	}

	return false
}

// SetTimeoutSeconds gets a reference to the given int32 and assigns it to the TimeoutSeconds field.
func (o *IqConnectionXo) SetTimeoutSeconds(v int32) {
	o.TimeoutSeconds = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IqConnectionXo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IqConnectionXo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IqConnectionXo) SetUrl(v string) {
	o.Url = &v
}

// GetUseTrustStoreForUrl returns the UseTrustStoreForUrl field value if set, zero value otherwise.
func (o *IqConnectionXo) GetUseTrustStoreForUrl() bool {
	if o == nil || IsNil(o.UseTrustStoreForUrl) {
		var ret bool
		return ret
	}
	return *o.UseTrustStoreForUrl
}

// GetUseTrustStoreForUrlOk returns a tuple with the UseTrustStoreForUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetUseTrustStoreForUrlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTrustStoreForUrl) {
		return nil, false
	}
	return o.UseTrustStoreForUrl, true
}

// HasUseTrustStoreForUrl returns a boolean if a field has been set.
func (o *IqConnectionXo) HasUseTrustStoreForUrl() bool {
	if o != nil && !IsNil(o.UseTrustStoreForUrl) {
		return true
	}

	return false
}

// SetUseTrustStoreForUrl gets a reference to the given bool and assigns it to the UseTrustStoreForUrl field.
func (o *IqConnectionXo) SetUseTrustStoreForUrl(v bool) {
	o.UseTrustStoreForUrl = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *IqConnectionXo) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IqConnectionXo) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *IqConnectionXo) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *IqConnectionXo) SetUsername(v string) {
	o.Username = &v
}

func (o IqConnectionXo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IqConnectionXo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authenticationType"] = o.AuthenticationType
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FailOpenModeEnabled) {
		toSerialize["failOpenModeEnabled"] = o.FailOpenModeEnabled
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.ShowLink) {
		toSerialize["showLink"] = o.ShowLink
	}
	if !IsNil(o.TimeoutSeconds) {
		toSerialize["timeoutSeconds"] = o.TimeoutSeconds
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UseTrustStoreForUrl) {
		toSerialize["useTrustStoreForUrl"] = o.UseTrustStoreForUrl
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

func (o *IqConnectionXo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authenticationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIqConnectionXo := _IqConnectionXo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIqConnectionXo)

	if err != nil {
		return err
	}

	*o = IqConnectionXo(varIqConnectionXo)

	return err
}

type NullableIqConnectionXo struct {
	value *IqConnectionXo
	isSet bool
}

func (v NullableIqConnectionXo) Get() *IqConnectionXo {
	return v.value
}

func (v *NullableIqConnectionXo) Set(val *IqConnectionXo) {
	v.value = val
	v.isSet = true
}

func (v NullableIqConnectionXo) IsSet() bool {
	return v.isSet
}

func (v *NullableIqConnectionXo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIqConnectionXo(val *IqConnectionXo) *NullableIqConnectionXo {
	return &NullableIqConnectionXo{value: val, isSet: true}
}

func (v NullableIqConnectionXo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIqConnectionXo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


