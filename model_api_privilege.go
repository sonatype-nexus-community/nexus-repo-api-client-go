/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.67.1-01.

API version: 3.67.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"encoding/json"
)

// checks if the ApiPrivilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiPrivilege{}

// ApiPrivilege struct for ApiPrivilege
type ApiPrivilege struct {
	Description *string `json:"description,omitempty"`
	// The name of the privilege.  This value cannot be changed.
	Name *string `json:"name,omitempty"`
	// Indicates whether the privilege can be changed. External values supplied to this will be ignored by the system.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// The type of privilege, each type covers different portions of the system. External values supplied to this will be ignored by the system.
	Type *string `json:"type,omitempty"`
}

// NewApiPrivilege instantiates a new ApiPrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiPrivilege() *ApiPrivilege {
	this := ApiPrivilege{}
	return &this
}

// NewApiPrivilegeWithDefaults instantiates a new ApiPrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiPrivilegeWithDefaults() *ApiPrivilege {
	this := ApiPrivilege{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApiPrivilege) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilege) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiPrivilege) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApiPrivilege) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiPrivilege) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilege) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiPrivilege) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiPrivilege) SetName(v string) {
	o.Name = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *ApiPrivilege) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilege) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *ApiPrivilege) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *ApiPrivilege) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiPrivilege) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilege) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiPrivilege) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiPrivilege) SetType(v string) {
	o.Type = &v
}

func (o ApiPrivilege) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiPrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableApiPrivilege struct {
	value *ApiPrivilege
	isSet bool
}

func (v NullableApiPrivilege) Get() *ApiPrivilege {
	return v.value
}

func (v *NullableApiPrivilege) Set(val *ApiPrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableApiPrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableApiPrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiPrivilege(val *ApiPrivilege) *NullableApiPrivilege {
	return &NullableApiPrivilege{value: val, isSet: true}
}

func (v NullableApiPrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiPrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


