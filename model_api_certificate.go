/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.74.0-05.

API version: 3.74.0-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"encoding/json"
)

// checks if the ApiCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCertificate{}

// ApiCertificate struct for ApiCertificate
type ApiCertificate struct {
	ExpiresOn *int64 `json:"expiresOn,omitempty"`
	Fingerprint *string `json:"fingerprint,omitempty"`
	Id *string `json:"id,omitempty"`
	IssuedOn *int64 `json:"issuedOn,omitempty"`
	IssuerCommonName *string `json:"issuerCommonName,omitempty"`
	IssuerOrganization *string `json:"issuerOrganization,omitempty"`
	IssuerOrganizationalUnit *string `json:"issuerOrganizationalUnit,omitempty"`
	Pem *string `json:"pem,omitempty"`
	SerialNumber *string `json:"serialNumber,omitempty"`
	SubjectCommonName *string `json:"subjectCommonName,omitempty"`
	SubjectOrganization *string `json:"subjectOrganization,omitempty"`
	SubjectOrganizationalUnit *string `json:"subjectOrganizationalUnit,omitempty"`
}

// NewApiCertificate instantiates a new ApiCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCertificate() *ApiCertificate {
	this := ApiCertificate{}
	return &this
}

// NewApiCertificateWithDefaults instantiates a new ApiCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCertificateWithDefaults() *ApiCertificate {
	this := ApiCertificate{}
	return &this
}

// GetExpiresOn returns the ExpiresOn field value if set, zero value otherwise.
func (o *ApiCertificate) GetExpiresOn() int64 {
	if o == nil || IsNil(o.ExpiresOn) {
		var ret int64
		return ret
	}
	return *o.ExpiresOn
}

// GetExpiresOnOk returns a tuple with the ExpiresOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetExpiresOnOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiresOn) {
		return nil, false
	}
	return o.ExpiresOn, true
}

// HasExpiresOn returns a boolean if a field has been set.
func (o *ApiCertificate) HasExpiresOn() bool {
	if o != nil && !IsNil(o.ExpiresOn) {
		return true
	}

	return false
}

// SetExpiresOn gets a reference to the given int64 and assigns it to the ExpiresOn field.
func (o *ApiCertificate) SetExpiresOn(v int64) {
	o.ExpiresOn = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *ApiCertificate) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *ApiCertificate) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *ApiCertificate) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiCertificate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiCertificate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiCertificate) SetId(v string) {
	o.Id = &v
}

// GetIssuedOn returns the IssuedOn field value if set, zero value otherwise.
func (o *ApiCertificate) GetIssuedOn() int64 {
	if o == nil || IsNil(o.IssuedOn) {
		var ret int64
		return ret
	}
	return *o.IssuedOn
}

// GetIssuedOnOk returns a tuple with the IssuedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetIssuedOnOk() (*int64, bool) {
	if o == nil || IsNil(o.IssuedOn) {
		return nil, false
	}
	return o.IssuedOn, true
}

// HasIssuedOn returns a boolean if a field has been set.
func (o *ApiCertificate) HasIssuedOn() bool {
	if o != nil && !IsNil(o.IssuedOn) {
		return true
	}

	return false
}

// SetIssuedOn gets a reference to the given int64 and assigns it to the IssuedOn field.
func (o *ApiCertificate) SetIssuedOn(v int64) {
	o.IssuedOn = &v
}

// GetIssuerCommonName returns the IssuerCommonName field value if set, zero value otherwise.
func (o *ApiCertificate) GetIssuerCommonName() string {
	if o == nil || IsNil(o.IssuerCommonName) {
		var ret string
		return ret
	}
	return *o.IssuerCommonName
}

// GetIssuerCommonNameOk returns a tuple with the IssuerCommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetIssuerCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerCommonName) {
		return nil, false
	}
	return o.IssuerCommonName, true
}

// HasIssuerCommonName returns a boolean if a field has been set.
func (o *ApiCertificate) HasIssuerCommonName() bool {
	if o != nil && !IsNil(o.IssuerCommonName) {
		return true
	}

	return false
}

// SetIssuerCommonName gets a reference to the given string and assigns it to the IssuerCommonName field.
func (o *ApiCertificate) SetIssuerCommonName(v string) {
	o.IssuerCommonName = &v
}

// GetIssuerOrganization returns the IssuerOrganization field value if set, zero value otherwise.
func (o *ApiCertificate) GetIssuerOrganization() string {
	if o == nil || IsNil(o.IssuerOrganization) {
		var ret string
		return ret
	}
	return *o.IssuerOrganization
}

// GetIssuerOrganizationOk returns a tuple with the IssuerOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetIssuerOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerOrganization) {
		return nil, false
	}
	return o.IssuerOrganization, true
}

// HasIssuerOrganization returns a boolean if a field has been set.
func (o *ApiCertificate) HasIssuerOrganization() bool {
	if o != nil && !IsNil(o.IssuerOrganization) {
		return true
	}

	return false
}

// SetIssuerOrganization gets a reference to the given string and assigns it to the IssuerOrganization field.
func (o *ApiCertificate) SetIssuerOrganization(v string) {
	o.IssuerOrganization = &v
}

// GetIssuerOrganizationalUnit returns the IssuerOrganizationalUnit field value if set, zero value otherwise.
func (o *ApiCertificate) GetIssuerOrganizationalUnit() string {
	if o == nil || IsNil(o.IssuerOrganizationalUnit) {
		var ret string
		return ret
	}
	return *o.IssuerOrganizationalUnit
}

// GetIssuerOrganizationalUnitOk returns a tuple with the IssuerOrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetIssuerOrganizationalUnitOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerOrganizationalUnit) {
		return nil, false
	}
	return o.IssuerOrganizationalUnit, true
}

// HasIssuerOrganizationalUnit returns a boolean if a field has been set.
func (o *ApiCertificate) HasIssuerOrganizationalUnit() bool {
	if o != nil && !IsNil(o.IssuerOrganizationalUnit) {
		return true
	}

	return false
}

// SetIssuerOrganizationalUnit gets a reference to the given string and assigns it to the IssuerOrganizationalUnit field.
func (o *ApiCertificate) SetIssuerOrganizationalUnit(v string) {
	o.IssuerOrganizationalUnit = &v
}

// GetPem returns the Pem field value if set, zero value otherwise.
func (o *ApiCertificate) GetPem() string {
	if o == nil || IsNil(o.Pem) {
		var ret string
		return ret
	}
	return *o.Pem
}

// GetPemOk returns a tuple with the Pem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetPemOk() (*string, bool) {
	if o == nil || IsNil(o.Pem) {
		return nil, false
	}
	return o.Pem, true
}

// HasPem returns a boolean if a field has been set.
func (o *ApiCertificate) HasPem() bool {
	if o != nil && !IsNil(o.Pem) {
		return true
	}

	return false
}

// SetPem gets a reference to the given string and assigns it to the Pem field.
func (o *ApiCertificate) SetPem(v string) {
	o.Pem = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *ApiCertificate) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *ApiCertificate) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *ApiCertificate) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSubjectCommonName returns the SubjectCommonName field value if set, zero value otherwise.
func (o *ApiCertificate) GetSubjectCommonName() string {
	if o == nil || IsNil(o.SubjectCommonName) {
		var ret string
		return ret
	}
	return *o.SubjectCommonName
}

// GetSubjectCommonNameOk returns a tuple with the SubjectCommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetSubjectCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectCommonName) {
		return nil, false
	}
	return o.SubjectCommonName, true
}

// HasSubjectCommonName returns a boolean if a field has been set.
func (o *ApiCertificate) HasSubjectCommonName() bool {
	if o != nil && !IsNil(o.SubjectCommonName) {
		return true
	}

	return false
}

// SetSubjectCommonName gets a reference to the given string and assigns it to the SubjectCommonName field.
func (o *ApiCertificate) SetSubjectCommonName(v string) {
	o.SubjectCommonName = &v
}

// GetSubjectOrganization returns the SubjectOrganization field value if set, zero value otherwise.
func (o *ApiCertificate) GetSubjectOrganization() string {
	if o == nil || IsNil(o.SubjectOrganization) {
		var ret string
		return ret
	}
	return *o.SubjectOrganization
}

// GetSubjectOrganizationOk returns a tuple with the SubjectOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetSubjectOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectOrganization) {
		return nil, false
	}
	return o.SubjectOrganization, true
}

// HasSubjectOrganization returns a boolean if a field has been set.
func (o *ApiCertificate) HasSubjectOrganization() bool {
	if o != nil && !IsNil(o.SubjectOrganization) {
		return true
	}

	return false
}

// SetSubjectOrganization gets a reference to the given string and assigns it to the SubjectOrganization field.
func (o *ApiCertificate) SetSubjectOrganization(v string) {
	o.SubjectOrganization = &v
}

// GetSubjectOrganizationalUnit returns the SubjectOrganizationalUnit field value if set, zero value otherwise.
func (o *ApiCertificate) GetSubjectOrganizationalUnit() string {
	if o == nil || IsNil(o.SubjectOrganizationalUnit) {
		var ret string
		return ret
	}
	return *o.SubjectOrganizationalUnit
}

// GetSubjectOrganizationalUnitOk returns a tuple with the SubjectOrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificate) GetSubjectOrganizationalUnitOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectOrganizationalUnit) {
		return nil, false
	}
	return o.SubjectOrganizationalUnit, true
}

// HasSubjectOrganizationalUnit returns a boolean if a field has been set.
func (o *ApiCertificate) HasSubjectOrganizationalUnit() bool {
	if o != nil && !IsNil(o.SubjectOrganizationalUnit) {
		return true
	}

	return false
}

// SetSubjectOrganizationalUnit gets a reference to the given string and assigns it to the SubjectOrganizationalUnit field.
func (o *ApiCertificate) SetSubjectOrganizationalUnit(v string) {
	o.SubjectOrganizationalUnit = &v
}

func (o ApiCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiresOn) {
		toSerialize["expiresOn"] = o.ExpiresOn
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssuedOn) {
		toSerialize["issuedOn"] = o.IssuedOn
	}
	if !IsNil(o.IssuerCommonName) {
		toSerialize["issuerCommonName"] = o.IssuerCommonName
	}
	if !IsNil(o.IssuerOrganization) {
		toSerialize["issuerOrganization"] = o.IssuerOrganization
	}
	if !IsNil(o.IssuerOrganizationalUnit) {
		toSerialize["issuerOrganizationalUnit"] = o.IssuerOrganizationalUnit
	}
	if !IsNil(o.Pem) {
		toSerialize["pem"] = o.Pem
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.SubjectCommonName) {
		toSerialize["subjectCommonName"] = o.SubjectCommonName
	}
	if !IsNil(o.SubjectOrganization) {
		toSerialize["subjectOrganization"] = o.SubjectOrganization
	}
	if !IsNil(o.SubjectOrganizationalUnit) {
		toSerialize["subjectOrganizationalUnit"] = o.SubjectOrganizationalUnit
	}
	return toSerialize, nil
}

type NullableApiCertificate struct {
	value *ApiCertificate
	isSet bool
}

func (v NullableApiCertificate) Get() *ApiCertificate {
	return v.value
}

func (v *NullableApiCertificate) Set(val *ApiCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCertificate(val *ApiCertificate) *NullableApiCertificate {
	return &NullableApiCertificate{value: val, isSet: true}
}

func (v NullableApiCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


