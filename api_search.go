/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.81.1-01.

API version: 3.81.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SearchAPIService SearchAPI service
type SearchAPIService service

type ApiSearchRequest struct {
	ctx context.Context
	ApiService *SearchAPIService
	continuationToken *string
	sort *string
	direction *string
	timeout *int32
	q *string
	repository *string
	format *string
	group *string
	name *string
	version *string
	prerelease *string
	md5 *string
	sha1 *string
	sha256 *string
	sha512 *string
	composerVendor *string
	composerPackage *string
	composerVersion *string
	conanBaseVersion *string
	conanChannel *string
	conanRevision *string
	conanPackageId *string
	conanPackageRevision *string
	conanBaseVersionStrict *string
	conanRevisionLatest *string
	conanSettingsArch *string
	conanSettingsOs *string
	conanSettingsCompiler *string
	conanSettingsCompilerVersion *string
	conanSettingsCompilerRuntime *string
	dockerImageName *string
	dockerImageTag *string
	dockerLayerId *string
	dockerContentDigest *string
	mavenGroupId *string
	mavenArtifactId *string
	mavenBaseVersion *string
	mavenExtension *string
	mavenClassifier *string
	gavec *string
	npmScope *string
	npmAuthor *string
	npmDescription *string
	npmKeywords *string
	npmLicense *string
	npmTaggedIs *string
	npmTaggedNot *string
	nugetId *string
	nugetTags *string
	nugetTitle *string
	nugetAuthors *string
	nugetDescription *string
	nugetSummary *string
	p2PluginName *string
	pypiClassifiers *string
	pypiDescription *string
	pypiKeywords *string
	pypiSummary *string
	rubygemsDescription *string
	rubygemsPlatform *string
	rubygemsSummary *string
	tag *string
	yumArchitecture *string
	yumName *string
}

// A token returned by a prior request. If present, the next page of results are returned
func (r ApiSearchRequest) ContinuationToken(continuationToken string) ApiSearchRequest {
	r.continuationToken = &continuationToken
	return r
}

// The field to sort the results against, if left empty, a sort based on match weight will be used.
func (r ApiSearchRequest) Sort(sort string) ApiSearchRequest {
	r.sort = &sort
	return r
}

// The direction to sort records in, defaults to ascending (&#39;asc&#39;) for all sort fields, except version, which defaults to descending (&#39;desc&#39;)
func (r ApiSearchRequest) Direction(direction string) ApiSearchRequest {
	r.direction = &direction
	return r
}

// How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.
func (r ApiSearchRequest) Timeout(timeout int32) ApiSearchRequest {
	r.timeout = &timeout
	return r
}

// Query by keyword
func (r ApiSearchRequest) Q(q string) ApiSearchRequest {
	r.q = &q
	return r
}

// Repository name
func (r ApiSearchRequest) Repository(repository string) ApiSearchRequest {
	r.repository = &repository
	return r
}

// Query by format
func (r ApiSearchRequest) Format(format string) ApiSearchRequest {
	r.format = &format
	return r
}

// Component group
func (r ApiSearchRequest) Group(group string) ApiSearchRequest {
	r.group = &group
	return r
}

// Component name
func (r ApiSearchRequest) Name(name string) ApiSearchRequest {
	r.name = &name
	return r
}

// Component version
func (r ApiSearchRequest) Version(version string) ApiSearchRequest {
	r.version = &version
	return r
}

// Prerelease version flag
func (r ApiSearchRequest) Prerelease(prerelease string) ApiSearchRequest {
	r.prerelease = &prerelease
	return r
}

// Specific MD5 hash of component&#39;s asset
func (r ApiSearchRequest) Md5(md5 string) ApiSearchRequest {
	r.md5 = &md5
	return r
}

// Specific SHA-1 hash of component&#39;s asset
func (r ApiSearchRequest) Sha1(sha1 string) ApiSearchRequest {
	r.sha1 = &sha1
	return r
}

// Specific SHA-256 hash of component&#39;s asset
func (r ApiSearchRequest) Sha256(sha256 string) ApiSearchRequest {
	r.sha256 = &sha256
	return r
}

// Specific SHA-512 hash of component&#39;s asset
func (r ApiSearchRequest) Sha512(sha512 string) ApiSearchRequest {
	r.sha512 = &sha512
	return r
}

// Vendor
func (r ApiSearchRequest) ComposerVendor(composerVendor string) ApiSearchRequest {
	r.composerVendor = &composerVendor
	return r
}

// Package
func (r ApiSearchRequest) ComposerPackage(composerPackage string) ApiSearchRequest {
	r.composerPackage = &composerPackage
	return r
}

// Version
func (r ApiSearchRequest) ComposerVersion(composerVersion string) ApiSearchRequest {
	r.composerVersion = &composerVersion
	return r
}

// Conan base version
func (r ApiSearchRequest) ConanBaseVersion(conanBaseVersion string) ApiSearchRequest {
	r.conanBaseVersion = &conanBaseVersion
	return r
}

// Conan channel
func (r ApiSearchRequest) ConanChannel(conanChannel string) ApiSearchRequest {
	r.conanChannel = &conanChannel
	return r
}

// Conan recipe revision
func (r ApiSearchRequest) ConanRevision(conanRevision string) ApiSearchRequest {
	r.conanRevision = &conanRevision
	return r
}

// Conan package id
func (r ApiSearchRequest) ConanPackageId(conanPackageId string) ApiSearchRequest {
	r.conanPackageId = &conanPackageId
	return r
}

// Conan package revision
func (r ApiSearchRequest) ConanPackageRevision(conanPackageRevision string) ApiSearchRequest {
	r.conanPackageRevision = &conanPackageRevision
	return r
}

// Conan base version strict
func (r ApiSearchRequest) ConanBaseVersionStrict(conanBaseVersionStrict string) ApiSearchRequest {
	r.conanBaseVersionStrict = &conanBaseVersionStrict
	return r
}

// Return latest revision
func (r ApiSearchRequest) ConanRevisionLatest(conanRevisionLatest string) ApiSearchRequest {
	r.conanRevisionLatest = &conanRevisionLatest
	return r
}

// Conan arch
func (r ApiSearchRequest) ConanSettingsArch(conanSettingsArch string) ApiSearchRequest {
	r.conanSettingsArch = &conanSettingsArch
	return r
}

// Conan os
func (r ApiSearchRequest) ConanSettingsOs(conanSettingsOs string) ApiSearchRequest {
	r.conanSettingsOs = &conanSettingsOs
	return r
}

// Conan compiler
func (r ApiSearchRequest) ConanSettingsCompiler(conanSettingsCompiler string) ApiSearchRequest {
	r.conanSettingsCompiler = &conanSettingsCompiler
	return r
}

// Conan compiler version
func (r ApiSearchRequest) ConanSettingsCompilerVersion(conanSettingsCompilerVersion string) ApiSearchRequest {
	r.conanSettingsCompilerVersion = &conanSettingsCompilerVersion
	return r
}

// Conan compiler runtime
func (r ApiSearchRequest) ConanSettingsCompilerRuntime(conanSettingsCompilerRuntime string) ApiSearchRequest {
	r.conanSettingsCompilerRuntime = &conanSettingsCompilerRuntime
	return r
}

// Docker image name
func (r ApiSearchRequest) DockerImageName(dockerImageName string) ApiSearchRequest {
	r.dockerImageName = &dockerImageName
	return r
}

// Docker image tag
func (r ApiSearchRequest) DockerImageTag(dockerImageTag string) ApiSearchRequest {
	r.dockerImageTag = &dockerImageTag
	return r
}

// Docker layer ID
func (r ApiSearchRequest) DockerLayerId(dockerLayerId string) ApiSearchRequest {
	r.dockerLayerId = &dockerLayerId
	return r
}

// Docker content digest
func (r ApiSearchRequest) DockerContentDigest(dockerContentDigest string) ApiSearchRequest {
	r.dockerContentDigest = &dockerContentDigest
	return r
}

// Maven groupId
func (r ApiSearchRequest) MavenGroupId(mavenGroupId string) ApiSearchRequest {
	r.mavenGroupId = &mavenGroupId
	return r
}

// Maven artifactId
func (r ApiSearchRequest) MavenArtifactId(mavenArtifactId string) ApiSearchRequest {
	r.mavenArtifactId = &mavenArtifactId
	return r
}

// Maven base version
func (r ApiSearchRequest) MavenBaseVersion(mavenBaseVersion string) ApiSearchRequest {
	r.mavenBaseVersion = &mavenBaseVersion
	return r
}

// Maven extension of component&#39;s asset
func (r ApiSearchRequest) MavenExtension(mavenExtension string) ApiSearchRequest {
	r.mavenExtension = &mavenExtension
	return r
}

// Maven classifier of component&#39;s asset
func (r ApiSearchRequest) MavenClassifier(mavenClassifier string) ApiSearchRequest {
	r.mavenClassifier = &mavenClassifier
	return r
}

// Group asset version extension classifier
func (r ApiSearchRequest) Gavec(gavec string) ApiSearchRequest {
	r.gavec = &gavec
	return r
}

// npm scope
func (r ApiSearchRequest) NpmScope(npmScope string) ApiSearchRequest {
	r.npmScope = &npmScope
	return r
}

// npm author
func (r ApiSearchRequest) NpmAuthor(npmAuthor string) ApiSearchRequest {
	r.npmAuthor = &npmAuthor
	return r
}

// npm description
func (r ApiSearchRequest) NpmDescription(npmDescription string) ApiSearchRequest {
	r.npmDescription = &npmDescription
	return r
}

// npm keywords
func (r ApiSearchRequest) NpmKeywords(npmKeywords string) ApiSearchRequest {
	r.npmKeywords = &npmKeywords
	return r
}

// npm license
func (r ApiSearchRequest) NpmLicense(npmLicense string) ApiSearchRequest {
	r.npmLicense = &npmLicense
	return r
}

// npm tagged is
func (r ApiSearchRequest) NpmTaggedIs(npmTaggedIs string) ApiSearchRequest {
	r.npmTaggedIs = &npmTaggedIs
	return r
}

// npm tagged not
func (r ApiSearchRequest) NpmTaggedNot(npmTaggedNot string) ApiSearchRequest {
	r.npmTaggedNot = &npmTaggedNot
	return r
}

// NuGet id
func (r ApiSearchRequest) NugetId(nugetId string) ApiSearchRequest {
	r.nugetId = &nugetId
	return r
}

// NuGet tags
func (r ApiSearchRequest) NugetTags(nugetTags string) ApiSearchRequest {
	r.nugetTags = &nugetTags
	return r
}

// NuGet title
func (r ApiSearchRequest) NugetTitle(nugetTitle string) ApiSearchRequest {
	r.nugetTitle = &nugetTitle
	return r
}

// NuGet authors
func (r ApiSearchRequest) NugetAuthors(nugetAuthors string) ApiSearchRequest {
	r.nugetAuthors = &nugetAuthors
	return r
}

// NuGet description
func (r ApiSearchRequest) NugetDescription(nugetDescription string) ApiSearchRequest {
	r.nugetDescription = &nugetDescription
	return r
}

// NuGet summary
func (r ApiSearchRequest) NugetSummary(nugetSummary string) ApiSearchRequest {
	r.nugetSummary = &nugetSummary
	return r
}

// p2 plugin name
func (r ApiSearchRequest) P2PluginName(p2PluginName string) ApiSearchRequest {
	r.p2PluginName = &p2PluginName
	return r
}

// PyPI classifiers
func (r ApiSearchRequest) PypiClassifiers(pypiClassifiers string) ApiSearchRequest {
	r.pypiClassifiers = &pypiClassifiers
	return r
}

// PyPI description
func (r ApiSearchRequest) PypiDescription(pypiDescription string) ApiSearchRequest {
	r.pypiDescription = &pypiDescription
	return r
}

// PyPI keywords
func (r ApiSearchRequest) PypiKeywords(pypiKeywords string) ApiSearchRequest {
	r.pypiKeywords = &pypiKeywords
	return r
}

// PyPI summary
func (r ApiSearchRequest) PypiSummary(pypiSummary string) ApiSearchRequest {
	r.pypiSummary = &pypiSummary
	return r
}

// RubyGems description
func (r ApiSearchRequest) RubygemsDescription(rubygemsDescription string) ApiSearchRequest {
	r.rubygemsDescription = &rubygemsDescription
	return r
}

// RubyGems platform
func (r ApiSearchRequest) RubygemsPlatform(rubygemsPlatform string) ApiSearchRequest {
	r.rubygemsPlatform = &rubygemsPlatform
	return r
}

// RubyGems summary
func (r ApiSearchRequest) RubygemsSummary(rubygemsSummary string) ApiSearchRequest {
	r.rubygemsSummary = &rubygemsSummary
	return r
}

// Component tag
func (r ApiSearchRequest) Tag(tag string) ApiSearchRequest {
	r.tag = &tag
	return r
}

// Yum architecture
func (r ApiSearchRequest) YumArchitecture(yumArchitecture string) ApiSearchRequest {
	r.yumArchitecture = &yumArchitecture
	return r
}

// Yum package name
func (r ApiSearchRequest) YumName(yumName string) ApiSearchRequest {
	r.yumName = &yumName
	return r
}

func (r ApiSearchRequest) Execute() (*PageComponentXO, *http.Response, error) {
	return r.ApiService.SearchExecute(r)
}

/*
Search Search components

All searches require at least one criterion of at least three characters before a trailing wildcard (\*) and cannot start with a wildcard (\*). Enclose your criteria in quotation marks to search an exact phrase; otherwise, search criteria will be split by any commas, spaces, dashes, or forward slashes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchRequest
*/
func (a *SearchAPIService) Search(ctx context.Context) ApiSearchRequest {
	return ApiSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageComponentXO
func (a *SearchAPIService) SearchExecute(r ApiSearchRequest) (*PageComponentXO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageComponentXO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchAPIService.Search")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continuationToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continuationToken", r.continuationToken, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "form", "")
	}
	if r.timeout != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeout", r.timeout, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository", r.repository, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.prerelease != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prerelease", r.prerelease, "form", "")
	}
	if r.md5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "md5", r.md5, "form", "")
	}
	if r.sha1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha1", r.sha1, "form", "")
	}
	if r.sha256 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha256", r.sha256, "form", "")
	}
	if r.sha512 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha512", r.sha512, "form", "")
	}
	if r.composerVendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.vendor", r.composerVendor, "form", "")
	}
	if r.composerPackage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.package", r.composerPackage, "form", "")
	}
	if r.composerVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.version", r.composerVersion, "form", "")
	}
	if r.conanBaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.baseVersion", r.conanBaseVersion, "form", "")
	}
	if r.conanChannel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.channel", r.conanChannel, "form", "")
	}
	if r.conanRevision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.revision", r.conanRevision, "form", "")
	}
	if r.conanPackageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.packageId", r.conanPackageId, "form", "")
	}
	if r.conanPackageRevision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.packageRevision", r.conanPackageRevision, "form", "")
	}
	if r.conanBaseVersionStrict != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.baseVersion.strict", r.conanBaseVersionStrict, "form", "")
	}
	if r.conanRevisionLatest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.revision.latest", r.conanRevisionLatest, "form", "")
	}
	if r.conanSettingsArch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.arch", r.conanSettingsArch, "form", "")
	}
	if r.conanSettingsOs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.os", r.conanSettingsOs, "form", "")
	}
	if r.conanSettingsCompiler != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler", r.conanSettingsCompiler, "form", "")
	}
	if r.conanSettingsCompilerVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler.version", r.conanSettingsCompilerVersion, "form", "")
	}
	if r.conanSettingsCompilerRuntime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler.runtime", r.conanSettingsCompilerRuntime, "form", "")
	}
	if r.dockerImageName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.imageName", r.dockerImageName, "form", "")
	}
	if r.dockerImageTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.imageTag", r.dockerImageTag, "form", "")
	}
	if r.dockerLayerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.layerId", r.dockerLayerId, "form", "")
	}
	if r.dockerContentDigest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.contentDigest", r.dockerContentDigest, "form", "")
	}
	if r.mavenGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.groupId", r.mavenGroupId, "form", "")
	}
	if r.mavenArtifactId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.artifactId", r.mavenArtifactId, "form", "")
	}
	if r.mavenBaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.baseVersion", r.mavenBaseVersion, "form", "")
	}
	if r.mavenExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.extension", r.mavenExtension, "form", "")
	}
	if r.mavenClassifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.classifier", r.mavenClassifier, "form", "")
	}
	if r.gavec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gavec", r.gavec, "form", "")
	}
	if r.npmScope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.scope", r.npmScope, "form", "")
	}
	if r.npmAuthor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.author", r.npmAuthor, "form", "")
	}
	if r.npmDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.description", r.npmDescription, "form", "")
	}
	if r.npmKeywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.keywords", r.npmKeywords, "form", "")
	}
	if r.npmLicense != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.license", r.npmLicense, "form", "")
	}
	if r.npmTaggedIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.tagged_is", r.npmTaggedIs, "form", "")
	}
	if r.npmTaggedNot != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.tagged_not", r.npmTaggedNot, "form", "")
	}
	if r.nugetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.id", r.nugetId, "form", "")
	}
	if r.nugetTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.tags", r.nugetTags, "form", "")
	}
	if r.nugetTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.title", r.nugetTitle, "form", "")
	}
	if r.nugetAuthors != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.authors", r.nugetAuthors, "form", "")
	}
	if r.nugetDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.description", r.nugetDescription, "form", "")
	}
	if r.nugetSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.summary", r.nugetSummary, "form", "")
	}
	if r.p2PluginName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "p2.pluginName", r.p2PluginName, "form", "")
	}
	if r.pypiClassifiers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.classifiers", r.pypiClassifiers, "form", "")
	}
	if r.pypiDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.description", r.pypiDescription, "form", "")
	}
	if r.pypiKeywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.keywords", r.pypiKeywords, "form", "")
	}
	if r.pypiSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.summary", r.pypiSummary, "form", "")
	}
	if r.rubygemsDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.description", r.rubygemsDescription, "form", "")
	}
	if r.rubygemsPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.platform", r.rubygemsPlatform, "form", "")
	}
	if r.rubygemsSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.summary", r.rubygemsSummary, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.yumArchitecture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "yum.architecture", r.yumArchitecture, "form", "")
	}
	if r.yumName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "yum.name", r.yumName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAndDownloadAssetsRequest struct {
	ctx context.Context
	ApiService *SearchAPIService
	sort *string
	direction *string
	timeout *int32
	q *string
	repository *string
	format *string
	group *string
	name *string
	version *string
	prerelease *string
	md5 *string
	sha1 *string
	sha256 *string
	sha512 *string
	composerVendor *string
	composerPackage *string
	composerVersion *string
	conanBaseVersion *string
	conanChannel *string
	conanRevision *string
	conanPackageId *string
	conanPackageRevision *string
	conanBaseVersionStrict *string
	conanRevisionLatest *string
	conanSettingsArch *string
	conanSettingsOs *string
	conanSettingsCompiler *string
	conanSettingsCompilerVersion *string
	conanSettingsCompilerRuntime *string
	dockerImageName *string
	dockerImageTag *string
	dockerLayerId *string
	dockerContentDigest *string
	mavenGroupId *string
	mavenArtifactId *string
	mavenBaseVersion *string
	mavenExtension *string
	mavenClassifier *string
	gavec *string
	npmScope *string
	npmAuthor *string
	npmDescription *string
	npmKeywords *string
	npmLicense *string
	npmTaggedIs *string
	npmTaggedNot *string
	nugetId *string
	nugetTags *string
	nugetTitle *string
	nugetAuthors *string
	nugetDescription *string
	nugetSummary *string
	p2PluginName *string
	pypiClassifiers *string
	pypiDescription *string
	pypiKeywords *string
	pypiSummary *string
	rubygemsDescription *string
	rubygemsPlatform *string
	rubygemsSummary *string
	tag *string
	yumArchitecture *string
	yumName *string
}

// The field to sort the results against, if left empty and more than 1 result is returned, the request will fail.
func (r ApiSearchAndDownloadAssetsRequest) Sort(sort string) ApiSearchAndDownloadAssetsRequest {
	r.sort = &sort
	return r
}

// The direction to sort records in, defaults to ascending (&#39;asc&#39;) for all sort fields, except version, which defaults to descending (&#39;desc&#39;)
func (r ApiSearchAndDownloadAssetsRequest) Direction(direction string) ApiSearchAndDownloadAssetsRequest {
	r.direction = &direction
	return r
}

// How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.
func (r ApiSearchAndDownloadAssetsRequest) Timeout(timeout int32) ApiSearchAndDownloadAssetsRequest {
	r.timeout = &timeout
	return r
}

// Query by keyword
func (r ApiSearchAndDownloadAssetsRequest) Q(q string) ApiSearchAndDownloadAssetsRequest {
	r.q = &q
	return r
}

// Repository name
func (r ApiSearchAndDownloadAssetsRequest) Repository(repository string) ApiSearchAndDownloadAssetsRequest {
	r.repository = &repository
	return r
}

// Query by format
func (r ApiSearchAndDownloadAssetsRequest) Format(format string) ApiSearchAndDownloadAssetsRequest {
	r.format = &format
	return r
}

// Component group
func (r ApiSearchAndDownloadAssetsRequest) Group(group string) ApiSearchAndDownloadAssetsRequest {
	r.group = &group
	return r
}

// Component name
func (r ApiSearchAndDownloadAssetsRequest) Name(name string) ApiSearchAndDownloadAssetsRequest {
	r.name = &name
	return r
}

// Component version
func (r ApiSearchAndDownloadAssetsRequest) Version(version string) ApiSearchAndDownloadAssetsRequest {
	r.version = &version
	return r
}

// Prerelease version flag
func (r ApiSearchAndDownloadAssetsRequest) Prerelease(prerelease string) ApiSearchAndDownloadAssetsRequest {
	r.prerelease = &prerelease
	return r
}

// Specific MD5 hash of component&#39;s asset
func (r ApiSearchAndDownloadAssetsRequest) Md5(md5 string) ApiSearchAndDownloadAssetsRequest {
	r.md5 = &md5
	return r
}

// Specific SHA-1 hash of component&#39;s asset
func (r ApiSearchAndDownloadAssetsRequest) Sha1(sha1 string) ApiSearchAndDownloadAssetsRequest {
	r.sha1 = &sha1
	return r
}

// Specific SHA-256 hash of component&#39;s asset
func (r ApiSearchAndDownloadAssetsRequest) Sha256(sha256 string) ApiSearchAndDownloadAssetsRequest {
	r.sha256 = &sha256
	return r
}

// Specific SHA-512 hash of component&#39;s asset
func (r ApiSearchAndDownloadAssetsRequest) Sha512(sha512 string) ApiSearchAndDownloadAssetsRequest {
	r.sha512 = &sha512
	return r
}

// Vendor
func (r ApiSearchAndDownloadAssetsRequest) ComposerVendor(composerVendor string) ApiSearchAndDownloadAssetsRequest {
	r.composerVendor = &composerVendor
	return r
}

// Package
func (r ApiSearchAndDownloadAssetsRequest) ComposerPackage(composerPackage string) ApiSearchAndDownloadAssetsRequest {
	r.composerPackage = &composerPackage
	return r
}

// Version
func (r ApiSearchAndDownloadAssetsRequest) ComposerVersion(composerVersion string) ApiSearchAndDownloadAssetsRequest {
	r.composerVersion = &composerVersion
	return r
}

// Conan base version
func (r ApiSearchAndDownloadAssetsRequest) ConanBaseVersion(conanBaseVersion string) ApiSearchAndDownloadAssetsRequest {
	r.conanBaseVersion = &conanBaseVersion
	return r
}

// Conan channel
func (r ApiSearchAndDownloadAssetsRequest) ConanChannel(conanChannel string) ApiSearchAndDownloadAssetsRequest {
	r.conanChannel = &conanChannel
	return r
}

// Conan recipe revision
func (r ApiSearchAndDownloadAssetsRequest) ConanRevision(conanRevision string) ApiSearchAndDownloadAssetsRequest {
	r.conanRevision = &conanRevision
	return r
}

// Conan package id
func (r ApiSearchAndDownloadAssetsRequest) ConanPackageId(conanPackageId string) ApiSearchAndDownloadAssetsRequest {
	r.conanPackageId = &conanPackageId
	return r
}

// Conan package revision
func (r ApiSearchAndDownloadAssetsRequest) ConanPackageRevision(conanPackageRevision string) ApiSearchAndDownloadAssetsRequest {
	r.conanPackageRevision = &conanPackageRevision
	return r
}

// Conan base version strict
func (r ApiSearchAndDownloadAssetsRequest) ConanBaseVersionStrict(conanBaseVersionStrict string) ApiSearchAndDownloadAssetsRequest {
	r.conanBaseVersionStrict = &conanBaseVersionStrict
	return r
}

// Return latest revision
func (r ApiSearchAndDownloadAssetsRequest) ConanRevisionLatest(conanRevisionLatest string) ApiSearchAndDownloadAssetsRequest {
	r.conanRevisionLatest = &conanRevisionLatest
	return r
}

// Conan arch
func (r ApiSearchAndDownloadAssetsRequest) ConanSettingsArch(conanSettingsArch string) ApiSearchAndDownloadAssetsRequest {
	r.conanSettingsArch = &conanSettingsArch
	return r
}

// Conan os
func (r ApiSearchAndDownloadAssetsRequest) ConanSettingsOs(conanSettingsOs string) ApiSearchAndDownloadAssetsRequest {
	r.conanSettingsOs = &conanSettingsOs
	return r
}

// Conan compiler
func (r ApiSearchAndDownloadAssetsRequest) ConanSettingsCompiler(conanSettingsCompiler string) ApiSearchAndDownloadAssetsRequest {
	r.conanSettingsCompiler = &conanSettingsCompiler
	return r
}

// Conan compiler version
func (r ApiSearchAndDownloadAssetsRequest) ConanSettingsCompilerVersion(conanSettingsCompilerVersion string) ApiSearchAndDownloadAssetsRequest {
	r.conanSettingsCompilerVersion = &conanSettingsCompilerVersion
	return r
}

// Conan compiler runtime
func (r ApiSearchAndDownloadAssetsRequest) ConanSettingsCompilerRuntime(conanSettingsCompilerRuntime string) ApiSearchAndDownloadAssetsRequest {
	r.conanSettingsCompilerRuntime = &conanSettingsCompilerRuntime
	return r
}

// Docker image name
func (r ApiSearchAndDownloadAssetsRequest) DockerImageName(dockerImageName string) ApiSearchAndDownloadAssetsRequest {
	r.dockerImageName = &dockerImageName
	return r
}

// Docker image tag
func (r ApiSearchAndDownloadAssetsRequest) DockerImageTag(dockerImageTag string) ApiSearchAndDownloadAssetsRequest {
	r.dockerImageTag = &dockerImageTag
	return r
}

// Docker layer ID
func (r ApiSearchAndDownloadAssetsRequest) DockerLayerId(dockerLayerId string) ApiSearchAndDownloadAssetsRequest {
	r.dockerLayerId = &dockerLayerId
	return r
}

// Docker content digest
func (r ApiSearchAndDownloadAssetsRequest) DockerContentDigest(dockerContentDigest string) ApiSearchAndDownloadAssetsRequest {
	r.dockerContentDigest = &dockerContentDigest
	return r
}

// Maven groupId
func (r ApiSearchAndDownloadAssetsRequest) MavenGroupId(mavenGroupId string) ApiSearchAndDownloadAssetsRequest {
	r.mavenGroupId = &mavenGroupId
	return r
}

// Maven artifactId
func (r ApiSearchAndDownloadAssetsRequest) MavenArtifactId(mavenArtifactId string) ApiSearchAndDownloadAssetsRequest {
	r.mavenArtifactId = &mavenArtifactId
	return r
}

// Maven base version
func (r ApiSearchAndDownloadAssetsRequest) MavenBaseVersion(mavenBaseVersion string) ApiSearchAndDownloadAssetsRequest {
	r.mavenBaseVersion = &mavenBaseVersion
	return r
}

// Maven extension of component&#39;s asset
func (r ApiSearchAndDownloadAssetsRequest) MavenExtension(mavenExtension string) ApiSearchAndDownloadAssetsRequest {
	r.mavenExtension = &mavenExtension
	return r
}

// Maven classifier of component&#39;s asset
func (r ApiSearchAndDownloadAssetsRequest) MavenClassifier(mavenClassifier string) ApiSearchAndDownloadAssetsRequest {
	r.mavenClassifier = &mavenClassifier
	return r
}

// Group asset version extension classifier
func (r ApiSearchAndDownloadAssetsRequest) Gavec(gavec string) ApiSearchAndDownloadAssetsRequest {
	r.gavec = &gavec
	return r
}

// npm scope
func (r ApiSearchAndDownloadAssetsRequest) NpmScope(npmScope string) ApiSearchAndDownloadAssetsRequest {
	r.npmScope = &npmScope
	return r
}

// npm author
func (r ApiSearchAndDownloadAssetsRequest) NpmAuthor(npmAuthor string) ApiSearchAndDownloadAssetsRequest {
	r.npmAuthor = &npmAuthor
	return r
}

// npm description
func (r ApiSearchAndDownloadAssetsRequest) NpmDescription(npmDescription string) ApiSearchAndDownloadAssetsRequest {
	r.npmDescription = &npmDescription
	return r
}

// npm keywords
func (r ApiSearchAndDownloadAssetsRequest) NpmKeywords(npmKeywords string) ApiSearchAndDownloadAssetsRequest {
	r.npmKeywords = &npmKeywords
	return r
}

// npm license
func (r ApiSearchAndDownloadAssetsRequest) NpmLicense(npmLicense string) ApiSearchAndDownloadAssetsRequest {
	r.npmLicense = &npmLicense
	return r
}

// npm tagged is
func (r ApiSearchAndDownloadAssetsRequest) NpmTaggedIs(npmTaggedIs string) ApiSearchAndDownloadAssetsRequest {
	r.npmTaggedIs = &npmTaggedIs
	return r
}

// npm tagged not
func (r ApiSearchAndDownloadAssetsRequest) NpmTaggedNot(npmTaggedNot string) ApiSearchAndDownloadAssetsRequest {
	r.npmTaggedNot = &npmTaggedNot
	return r
}

// NuGet id
func (r ApiSearchAndDownloadAssetsRequest) NugetId(nugetId string) ApiSearchAndDownloadAssetsRequest {
	r.nugetId = &nugetId
	return r
}

// NuGet tags
func (r ApiSearchAndDownloadAssetsRequest) NugetTags(nugetTags string) ApiSearchAndDownloadAssetsRequest {
	r.nugetTags = &nugetTags
	return r
}

// NuGet title
func (r ApiSearchAndDownloadAssetsRequest) NugetTitle(nugetTitle string) ApiSearchAndDownloadAssetsRequest {
	r.nugetTitle = &nugetTitle
	return r
}

// NuGet authors
func (r ApiSearchAndDownloadAssetsRequest) NugetAuthors(nugetAuthors string) ApiSearchAndDownloadAssetsRequest {
	r.nugetAuthors = &nugetAuthors
	return r
}

// NuGet description
func (r ApiSearchAndDownloadAssetsRequest) NugetDescription(nugetDescription string) ApiSearchAndDownloadAssetsRequest {
	r.nugetDescription = &nugetDescription
	return r
}

// NuGet summary
func (r ApiSearchAndDownloadAssetsRequest) NugetSummary(nugetSummary string) ApiSearchAndDownloadAssetsRequest {
	r.nugetSummary = &nugetSummary
	return r
}

// p2 plugin name
func (r ApiSearchAndDownloadAssetsRequest) P2PluginName(p2PluginName string) ApiSearchAndDownloadAssetsRequest {
	r.p2PluginName = &p2PluginName
	return r
}

// PyPI classifiers
func (r ApiSearchAndDownloadAssetsRequest) PypiClassifiers(pypiClassifiers string) ApiSearchAndDownloadAssetsRequest {
	r.pypiClassifiers = &pypiClassifiers
	return r
}

// PyPI description
func (r ApiSearchAndDownloadAssetsRequest) PypiDescription(pypiDescription string) ApiSearchAndDownloadAssetsRequest {
	r.pypiDescription = &pypiDescription
	return r
}

// PyPI keywords
func (r ApiSearchAndDownloadAssetsRequest) PypiKeywords(pypiKeywords string) ApiSearchAndDownloadAssetsRequest {
	r.pypiKeywords = &pypiKeywords
	return r
}

// PyPI summary
func (r ApiSearchAndDownloadAssetsRequest) PypiSummary(pypiSummary string) ApiSearchAndDownloadAssetsRequest {
	r.pypiSummary = &pypiSummary
	return r
}

// RubyGems description
func (r ApiSearchAndDownloadAssetsRequest) RubygemsDescription(rubygemsDescription string) ApiSearchAndDownloadAssetsRequest {
	r.rubygemsDescription = &rubygemsDescription
	return r
}

// RubyGems platform
func (r ApiSearchAndDownloadAssetsRequest) RubygemsPlatform(rubygemsPlatform string) ApiSearchAndDownloadAssetsRequest {
	r.rubygemsPlatform = &rubygemsPlatform
	return r
}

// RubyGems summary
func (r ApiSearchAndDownloadAssetsRequest) RubygemsSummary(rubygemsSummary string) ApiSearchAndDownloadAssetsRequest {
	r.rubygemsSummary = &rubygemsSummary
	return r
}

// Component tag
func (r ApiSearchAndDownloadAssetsRequest) Tag(tag string) ApiSearchAndDownloadAssetsRequest {
	r.tag = &tag
	return r
}

// Yum architecture
func (r ApiSearchAndDownloadAssetsRequest) YumArchitecture(yumArchitecture string) ApiSearchAndDownloadAssetsRequest {
	r.yumArchitecture = &yumArchitecture
	return r
}

// Yum package name
func (r ApiSearchAndDownloadAssetsRequest) YumName(yumName string) ApiSearchAndDownloadAssetsRequest {
	r.yumName = &yumName
	return r
}

func (r ApiSearchAndDownloadAssetsRequest) Execute() (*http.Response, error) {
	return r.ApiService.SearchAndDownloadAssetsExecute(r)
}

/*
SearchAndDownloadAssets Search and download asset

Returns a 302 Found with location header field set to download URL. Unless a sort parameter is supplied, the search must return a single asset to receive download URL.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchAndDownloadAssetsRequest
*/
func (a *SearchAPIService) SearchAndDownloadAssets(ctx context.Context) ApiSearchAndDownloadAssetsRequest {
	return ApiSearchAndDownloadAssetsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SearchAPIService) SearchAndDownloadAssetsExecute(r ApiSearchAndDownloadAssetsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchAPIService.SearchAndDownloadAssets")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/assets/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "form", "")
	}
	if r.timeout != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeout", r.timeout, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository", r.repository, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.prerelease != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prerelease", r.prerelease, "form", "")
	}
	if r.md5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "md5", r.md5, "form", "")
	}
	if r.sha1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha1", r.sha1, "form", "")
	}
	if r.sha256 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha256", r.sha256, "form", "")
	}
	if r.sha512 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha512", r.sha512, "form", "")
	}
	if r.composerVendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.vendor", r.composerVendor, "form", "")
	}
	if r.composerPackage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.package", r.composerPackage, "form", "")
	}
	if r.composerVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.version", r.composerVersion, "form", "")
	}
	if r.conanBaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.baseVersion", r.conanBaseVersion, "form", "")
	}
	if r.conanChannel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.channel", r.conanChannel, "form", "")
	}
	if r.conanRevision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.revision", r.conanRevision, "form", "")
	}
	if r.conanPackageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.packageId", r.conanPackageId, "form", "")
	}
	if r.conanPackageRevision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.packageRevision", r.conanPackageRevision, "form", "")
	}
	if r.conanBaseVersionStrict != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.baseVersion.strict", r.conanBaseVersionStrict, "form", "")
	}
	if r.conanRevisionLatest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.revision.latest", r.conanRevisionLatest, "form", "")
	}
	if r.conanSettingsArch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.arch", r.conanSettingsArch, "form", "")
	}
	if r.conanSettingsOs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.os", r.conanSettingsOs, "form", "")
	}
	if r.conanSettingsCompiler != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler", r.conanSettingsCompiler, "form", "")
	}
	if r.conanSettingsCompilerVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler.version", r.conanSettingsCompilerVersion, "form", "")
	}
	if r.conanSettingsCompilerRuntime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler.runtime", r.conanSettingsCompilerRuntime, "form", "")
	}
	if r.dockerImageName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.imageName", r.dockerImageName, "form", "")
	}
	if r.dockerImageTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.imageTag", r.dockerImageTag, "form", "")
	}
	if r.dockerLayerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.layerId", r.dockerLayerId, "form", "")
	}
	if r.dockerContentDigest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.contentDigest", r.dockerContentDigest, "form", "")
	}
	if r.mavenGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.groupId", r.mavenGroupId, "form", "")
	}
	if r.mavenArtifactId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.artifactId", r.mavenArtifactId, "form", "")
	}
	if r.mavenBaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.baseVersion", r.mavenBaseVersion, "form", "")
	}
	if r.mavenExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.extension", r.mavenExtension, "form", "")
	}
	if r.mavenClassifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.classifier", r.mavenClassifier, "form", "")
	}
	if r.gavec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gavec", r.gavec, "form", "")
	}
	if r.npmScope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.scope", r.npmScope, "form", "")
	}
	if r.npmAuthor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.author", r.npmAuthor, "form", "")
	}
	if r.npmDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.description", r.npmDescription, "form", "")
	}
	if r.npmKeywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.keywords", r.npmKeywords, "form", "")
	}
	if r.npmLicense != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.license", r.npmLicense, "form", "")
	}
	if r.npmTaggedIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.tagged_is", r.npmTaggedIs, "form", "")
	}
	if r.npmTaggedNot != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.tagged_not", r.npmTaggedNot, "form", "")
	}
	if r.nugetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.id", r.nugetId, "form", "")
	}
	if r.nugetTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.tags", r.nugetTags, "form", "")
	}
	if r.nugetTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.title", r.nugetTitle, "form", "")
	}
	if r.nugetAuthors != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.authors", r.nugetAuthors, "form", "")
	}
	if r.nugetDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.description", r.nugetDescription, "form", "")
	}
	if r.nugetSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.summary", r.nugetSummary, "form", "")
	}
	if r.p2PluginName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "p2.pluginName", r.p2PluginName, "form", "")
	}
	if r.pypiClassifiers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.classifiers", r.pypiClassifiers, "form", "")
	}
	if r.pypiDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.description", r.pypiDescription, "form", "")
	}
	if r.pypiKeywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.keywords", r.pypiKeywords, "form", "")
	}
	if r.pypiSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.summary", r.pypiSummary, "form", "")
	}
	if r.rubygemsDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.description", r.rubygemsDescription, "form", "")
	}
	if r.rubygemsPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.platform", r.rubygemsPlatform, "form", "")
	}
	if r.rubygemsSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.summary", r.rubygemsSummary, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.yumArchitecture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "yum.architecture", r.yumArchitecture, "form", "")
	}
	if r.yumName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "yum.name", r.yumName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSearchAssetsRequest struct {
	ctx context.Context
	ApiService *SearchAPIService
	continuationToken *string
	sort *string
	direction *string
	timeout *int32
	q *string
	repository *string
	format *string
	group *string
	name *string
	version *string
	prerelease *string
	md5 *string
	sha1 *string
	sha256 *string
	sha512 *string
	composerVendor *string
	composerPackage *string
	composerVersion *string
	conanBaseVersion *string
	conanChannel *string
	conanRevision *string
	conanPackageId *string
	conanPackageRevision *string
	conanBaseVersionStrict *string
	conanRevisionLatest *string
	conanSettingsArch *string
	conanSettingsOs *string
	conanSettingsCompiler *string
	conanSettingsCompilerVersion *string
	conanSettingsCompilerRuntime *string
	dockerImageName *string
	dockerImageTag *string
	dockerLayerId *string
	dockerContentDigest *string
	mavenGroupId *string
	mavenArtifactId *string
	mavenBaseVersion *string
	mavenExtension *string
	mavenClassifier *string
	gavec *string
	npmScope *string
	npmAuthor *string
	npmDescription *string
	npmKeywords *string
	npmLicense *string
	npmTaggedIs *string
	npmTaggedNot *string
	nugetId *string
	nugetTags *string
	nugetTitle *string
	nugetAuthors *string
	nugetDescription *string
	nugetSummary *string
	p2PluginName *string
	pypiClassifiers *string
	pypiDescription *string
	pypiKeywords *string
	pypiSummary *string
	rubygemsDescription *string
	rubygemsPlatform *string
	rubygemsSummary *string
	tag *string
	yumArchitecture *string
	yumName *string
}

// A token returned by a prior request. If present, the next page of results are returned
func (r ApiSearchAssetsRequest) ContinuationToken(continuationToken string) ApiSearchAssetsRequest {
	r.continuationToken = &continuationToken
	return r
}

// The field to sort the results against, if left empty, a sort based on match weight will be used.
func (r ApiSearchAssetsRequest) Sort(sort string) ApiSearchAssetsRequest {
	r.sort = &sort
	return r
}

// The direction to sort records in, defaults to ascending (&#39;asc&#39;) for all sort fields, except version, which defaults to descending (&#39;desc&#39;)
func (r ApiSearchAssetsRequest) Direction(direction string) ApiSearchAssetsRequest {
	r.direction = &direction
	return r
}

// How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.
func (r ApiSearchAssetsRequest) Timeout(timeout int32) ApiSearchAssetsRequest {
	r.timeout = &timeout
	return r
}

// Query by keyword
func (r ApiSearchAssetsRequest) Q(q string) ApiSearchAssetsRequest {
	r.q = &q
	return r
}

// Repository name
func (r ApiSearchAssetsRequest) Repository(repository string) ApiSearchAssetsRequest {
	r.repository = &repository
	return r
}

// Query by format
func (r ApiSearchAssetsRequest) Format(format string) ApiSearchAssetsRequest {
	r.format = &format
	return r
}

// Component group
func (r ApiSearchAssetsRequest) Group(group string) ApiSearchAssetsRequest {
	r.group = &group
	return r
}

// Component name
func (r ApiSearchAssetsRequest) Name(name string) ApiSearchAssetsRequest {
	r.name = &name
	return r
}

// Component version
func (r ApiSearchAssetsRequest) Version(version string) ApiSearchAssetsRequest {
	r.version = &version
	return r
}

// Prerelease version flag
func (r ApiSearchAssetsRequest) Prerelease(prerelease string) ApiSearchAssetsRequest {
	r.prerelease = &prerelease
	return r
}

// Specific MD5 hash of component&#39;s asset
func (r ApiSearchAssetsRequest) Md5(md5 string) ApiSearchAssetsRequest {
	r.md5 = &md5
	return r
}

// Specific SHA-1 hash of component&#39;s asset
func (r ApiSearchAssetsRequest) Sha1(sha1 string) ApiSearchAssetsRequest {
	r.sha1 = &sha1
	return r
}

// Specific SHA-256 hash of component&#39;s asset
func (r ApiSearchAssetsRequest) Sha256(sha256 string) ApiSearchAssetsRequest {
	r.sha256 = &sha256
	return r
}

// Specific SHA-512 hash of component&#39;s asset
func (r ApiSearchAssetsRequest) Sha512(sha512 string) ApiSearchAssetsRequest {
	r.sha512 = &sha512
	return r
}

// Vendor
func (r ApiSearchAssetsRequest) ComposerVendor(composerVendor string) ApiSearchAssetsRequest {
	r.composerVendor = &composerVendor
	return r
}

// Package
func (r ApiSearchAssetsRequest) ComposerPackage(composerPackage string) ApiSearchAssetsRequest {
	r.composerPackage = &composerPackage
	return r
}

// Version
func (r ApiSearchAssetsRequest) ComposerVersion(composerVersion string) ApiSearchAssetsRequest {
	r.composerVersion = &composerVersion
	return r
}

// Conan base version
func (r ApiSearchAssetsRequest) ConanBaseVersion(conanBaseVersion string) ApiSearchAssetsRequest {
	r.conanBaseVersion = &conanBaseVersion
	return r
}

// Conan channel
func (r ApiSearchAssetsRequest) ConanChannel(conanChannel string) ApiSearchAssetsRequest {
	r.conanChannel = &conanChannel
	return r
}

// Conan recipe revision
func (r ApiSearchAssetsRequest) ConanRevision(conanRevision string) ApiSearchAssetsRequest {
	r.conanRevision = &conanRevision
	return r
}

// Conan package id
func (r ApiSearchAssetsRequest) ConanPackageId(conanPackageId string) ApiSearchAssetsRequest {
	r.conanPackageId = &conanPackageId
	return r
}

// Conan package revision
func (r ApiSearchAssetsRequest) ConanPackageRevision(conanPackageRevision string) ApiSearchAssetsRequest {
	r.conanPackageRevision = &conanPackageRevision
	return r
}

// Conan base version strict
func (r ApiSearchAssetsRequest) ConanBaseVersionStrict(conanBaseVersionStrict string) ApiSearchAssetsRequest {
	r.conanBaseVersionStrict = &conanBaseVersionStrict
	return r
}

// Return latest revision
func (r ApiSearchAssetsRequest) ConanRevisionLatest(conanRevisionLatest string) ApiSearchAssetsRequest {
	r.conanRevisionLatest = &conanRevisionLatest
	return r
}

// Conan arch
func (r ApiSearchAssetsRequest) ConanSettingsArch(conanSettingsArch string) ApiSearchAssetsRequest {
	r.conanSettingsArch = &conanSettingsArch
	return r
}

// Conan os
func (r ApiSearchAssetsRequest) ConanSettingsOs(conanSettingsOs string) ApiSearchAssetsRequest {
	r.conanSettingsOs = &conanSettingsOs
	return r
}

// Conan compiler
func (r ApiSearchAssetsRequest) ConanSettingsCompiler(conanSettingsCompiler string) ApiSearchAssetsRequest {
	r.conanSettingsCompiler = &conanSettingsCompiler
	return r
}

// Conan compiler version
func (r ApiSearchAssetsRequest) ConanSettingsCompilerVersion(conanSettingsCompilerVersion string) ApiSearchAssetsRequest {
	r.conanSettingsCompilerVersion = &conanSettingsCompilerVersion
	return r
}

// Conan compiler runtime
func (r ApiSearchAssetsRequest) ConanSettingsCompilerRuntime(conanSettingsCompilerRuntime string) ApiSearchAssetsRequest {
	r.conanSettingsCompilerRuntime = &conanSettingsCompilerRuntime
	return r
}

// Docker image name
func (r ApiSearchAssetsRequest) DockerImageName(dockerImageName string) ApiSearchAssetsRequest {
	r.dockerImageName = &dockerImageName
	return r
}

// Docker image tag
func (r ApiSearchAssetsRequest) DockerImageTag(dockerImageTag string) ApiSearchAssetsRequest {
	r.dockerImageTag = &dockerImageTag
	return r
}

// Docker layer ID
func (r ApiSearchAssetsRequest) DockerLayerId(dockerLayerId string) ApiSearchAssetsRequest {
	r.dockerLayerId = &dockerLayerId
	return r
}

// Docker content digest
func (r ApiSearchAssetsRequest) DockerContentDigest(dockerContentDigest string) ApiSearchAssetsRequest {
	r.dockerContentDigest = &dockerContentDigest
	return r
}

// Maven groupId
func (r ApiSearchAssetsRequest) MavenGroupId(mavenGroupId string) ApiSearchAssetsRequest {
	r.mavenGroupId = &mavenGroupId
	return r
}

// Maven artifactId
func (r ApiSearchAssetsRequest) MavenArtifactId(mavenArtifactId string) ApiSearchAssetsRequest {
	r.mavenArtifactId = &mavenArtifactId
	return r
}

// Maven base version
func (r ApiSearchAssetsRequest) MavenBaseVersion(mavenBaseVersion string) ApiSearchAssetsRequest {
	r.mavenBaseVersion = &mavenBaseVersion
	return r
}

// Maven extension of component&#39;s asset
func (r ApiSearchAssetsRequest) MavenExtension(mavenExtension string) ApiSearchAssetsRequest {
	r.mavenExtension = &mavenExtension
	return r
}

// Maven classifier of component&#39;s asset
func (r ApiSearchAssetsRequest) MavenClassifier(mavenClassifier string) ApiSearchAssetsRequest {
	r.mavenClassifier = &mavenClassifier
	return r
}

// Group asset version extension classifier
func (r ApiSearchAssetsRequest) Gavec(gavec string) ApiSearchAssetsRequest {
	r.gavec = &gavec
	return r
}

// npm scope
func (r ApiSearchAssetsRequest) NpmScope(npmScope string) ApiSearchAssetsRequest {
	r.npmScope = &npmScope
	return r
}

// npm author
func (r ApiSearchAssetsRequest) NpmAuthor(npmAuthor string) ApiSearchAssetsRequest {
	r.npmAuthor = &npmAuthor
	return r
}

// npm description
func (r ApiSearchAssetsRequest) NpmDescription(npmDescription string) ApiSearchAssetsRequest {
	r.npmDescription = &npmDescription
	return r
}

// npm keywords
func (r ApiSearchAssetsRequest) NpmKeywords(npmKeywords string) ApiSearchAssetsRequest {
	r.npmKeywords = &npmKeywords
	return r
}

// npm license
func (r ApiSearchAssetsRequest) NpmLicense(npmLicense string) ApiSearchAssetsRequest {
	r.npmLicense = &npmLicense
	return r
}

// npm tagged is
func (r ApiSearchAssetsRequest) NpmTaggedIs(npmTaggedIs string) ApiSearchAssetsRequest {
	r.npmTaggedIs = &npmTaggedIs
	return r
}

// npm tagged not
func (r ApiSearchAssetsRequest) NpmTaggedNot(npmTaggedNot string) ApiSearchAssetsRequest {
	r.npmTaggedNot = &npmTaggedNot
	return r
}

// NuGet id
func (r ApiSearchAssetsRequest) NugetId(nugetId string) ApiSearchAssetsRequest {
	r.nugetId = &nugetId
	return r
}

// NuGet tags
func (r ApiSearchAssetsRequest) NugetTags(nugetTags string) ApiSearchAssetsRequest {
	r.nugetTags = &nugetTags
	return r
}

// NuGet title
func (r ApiSearchAssetsRequest) NugetTitle(nugetTitle string) ApiSearchAssetsRequest {
	r.nugetTitle = &nugetTitle
	return r
}

// NuGet authors
func (r ApiSearchAssetsRequest) NugetAuthors(nugetAuthors string) ApiSearchAssetsRequest {
	r.nugetAuthors = &nugetAuthors
	return r
}

// NuGet description
func (r ApiSearchAssetsRequest) NugetDescription(nugetDescription string) ApiSearchAssetsRequest {
	r.nugetDescription = &nugetDescription
	return r
}

// NuGet summary
func (r ApiSearchAssetsRequest) NugetSummary(nugetSummary string) ApiSearchAssetsRequest {
	r.nugetSummary = &nugetSummary
	return r
}

// p2 plugin name
func (r ApiSearchAssetsRequest) P2PluginName(p2PluginName string) ApiSearchAssetsRequest {
	r.p2PluginName = &p2PluginName
	return r
}

// PyPI classifiers
func (r ApiSearchAssetsRequest) PypiClassifiers(pypiClassifiers string) ApiSearchAssetsRequest {
	r.pypiClassifiers = &pypiClassifiers
	return r
}

// PyPI description
func (r ApiSearchAssetsRequest) PypiDescription(pypiDescription string) ApiSearchAssetsRequest {
	r.pypiDescription = &pypiDescription
	return r
}

// PyPI keywords
func (r ApiSearchAssetsRequest) PypiKeywords(pypiKeywords string) ApiSearchAssetsRequest {
	r.pypiKeywords = &pypiKeywords
	return r
}

// PyPI summary
func (r ApiSearchAssetsRequest) PypiSummary(pypiSummary string) ApiSearchAssetsRequest {
	r.pypiSummary = &pypiSummary
	return r
}

// RubyGems description
func (r ApiSearchAssetsRequest) RubygemsDescription(rubygemsDescription string) ApiSearchAssetsRequest {
	r.rubygemsDescription = &rubygemsDescription
	return r
}

// RubyGems platform
func (r ApiSearchAssetsRequest) RubygemsPlatform(rubygemsPlatform string) ApiSearchAssetsRequest {
	r.rubygemsPlatform = &rubygemsPlatform
	return r
}

// RubyGems summary
func (r ApiSearchAssetsRequest) RubygemsSummary(rubygemsSummary string) ApiSearchAssetsRequest {
	r.rubygemsSummary = &rubygemsSummary
	return r
}

// Component tag
func (r ApiSearchAssetsRequest) Tag(tag string) ApiSearchAssetsRequest {
	r.tag = &tag
	return r
}

// Yum architecture
func (r ApiSearchAssetsRequest) YumArchitecture(yumArchitecture string) ApiSearchAssetsRequest {
	r.yumArchitecture = &yumArchitecture
	return r
}

// Yum package name
func (r ApiSearchAssetsRequest) YumName(yumName string) ApiSearchAssetsRequest {
	r.yumName = &yumName
	return r
}

func (r ApiSearchAssetsRequest) Execute() (*PageAssetXO, *http.Response, error) {
	return r.ApiService.SearchAssetsExecute(r)
}

/*
SearchAssets Search assets

All searches require at least one criterion of at least three characters before a trailing wildcard (\*) and cannot start with a wildcard (\*). Enclose your criteria in quotation marks to search an exact phrase; otherwise, search criteria will be split by any commas, spaces, dashes, or forward slashes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchAssetsRequest
*/
func (a *SearchAPIService) SearchAssets(ctx context.Context) ApiSearchAssetsRequest {
	return ApiSearchAssetsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageAssetXO
func (a *SearchAPIService) SearchAssetsExecute(r ApiSearchAssetsRequest) (*PageAssetXO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageAssetXO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchAPIService.SearchAssets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/search/assets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continuationToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continuationToken", r.continuationToken, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "form", "")
	}
	if r.timeout != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeout", r.timeout, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository", r.repository, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.prerelease != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prerelease", r.prerelease, "form", "")
	}
	if r.md5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "md5", r.md5, "form", "")
	}
	if r.sha1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha1", r.sha1, "form", "")
	}
	if r.sha256 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha256", r.sha256, "form", "")
	}
	if r.sha512 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha512", r.sha512, "form", "")
	}
	if r.composerVendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.vendor", r.composerVendor, "form", "")
	}
	if r.composerPackage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.package", r.composerPackage, "form", "")
	}
	if r.composerVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "composer.version", r.composerVersion, "form", "")
	}
	if r.conanBaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.baseVersion", r.conanBaseVersion, "form", "")
	}
	if r.conanChannel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.channel", r.conanChannel, "form", "")
	}
	if r.conanRevision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.revision", r.conanRevision, "form", "")
	}
	if r.conanPackageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.packageId", r.conanPackageId, "form", "")
	}
	if r.conanPackageRevision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.packageRevision", r.conanPackageRevision, "form", "")
	}
	if r.conanBaseVersionStrict != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.baseVersion.strict", r.conanBaseVersionStrict, "form", "")
	}
	if r.conanRevisionLatest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.revision.latest", r.conanRevisionLatest, "form", "")
	}
	if r.conanSettingsArch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.arch", r.conanSettingsArch, "form", "")
	}
	if r.conanSettingsOs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.os", r.conanSettingsOs, "form", "")
	}
	if r.conanSettingsCompiler != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler", r.conanSettingsCompiler, "form", "")
	}
	if r.conanSettingsCompilerVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler.version", r.conanSettingsCompilerVersion, "form", "")
	}
	if r.conanSettingsCompilerRuntime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conan.settings.compiler.runtime", r.conanSettingsCompilerRuntime, "form", "")
	}
	if r.dockerImageName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.imageName", r.dockerImageName, "form", "")
	}
	if r.dockerImageTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.imageTag", r.dockerImageTag, "form", "")
	}
	if r.dockerLayerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.layerId", r.dockerLayerId, "form", "")
	}
	if r.dockerContentDigest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "docker.contentDigest", r.dockerContentDigest, "form", "")
	}
	if r.mavenGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.groupId", r.mavenGroupId, "form", "")
	}
	if r.mavenArtifactId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.artifactId", r.mavenArtifactId, "form", "")
	}
	if r.mavenBaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.baseVersion", r.mavenBaseVersion, "form", "")
	}
	if r.mavenExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.extension", r.mavenExtension, "form", "")
	}
	if r.mavenClassifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maven.classifier", r.mavenClassifier, "form", "")
	}
	if r.gavec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gavec", r.gavec, "form", "")
	}
	if r.npmScope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.scope", r.npmScope, "form", "")
	}
	if r.npmAuthor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.author", r.npmAuthor, "form", "")
	}
	if r.npmDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.description", r.npmDescription, "form", "")
	}
	if r.npmKeywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.keywords", r.npmKeywords, "form", "")
	}
	if r.npmLicense != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.license", r.npmLicense, "form", "")
	}
	if r.npmTaggedIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.tagged_is", r.npmTaggedIs, "form", "")
	}
	if r.npmTaggedNot != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "npm.tagged_not", r.npmTaggedNot, "form", "")
	}
	if r.nugetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.id", r.nugetId, "form", "")
	}
	if r.nugetTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.tags", r.nugetTags, "form", "")
	}
	if r.nugetTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.title", r.nugetTitle, "form", "")
	}
	if r.nugetAuthors != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.authors", r.nugetAuthors, "form", "")
	}
	if r.nugetDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.description", r.nugetDescription, "form", "")
	}
	if r.nugetSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nuget.summary", r.nugetSummary, "form", "")
	}
	if r.p2PluginName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "p2.pluginName", r.p2PluginName, "form", "")
	}
	if r.pypiClassifiers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.classifiers", r.pypiClassifiers, "form", "")
	}
	if r.pypiDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.description", r.pypiDescription, "form", "")
	}
	if r.pypiKeywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.keywords", r.pypiKeywords, "form", "")
	}
	if r.pypiSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pypi.summary", r.pypiSummary, "form", "")
	}
	if r.rubygemsDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.description", r.rubygemsDescription, "form", "")
	}
	if r.rubygemsPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.platform", r.rubygemsPlatform, "form", "")
	}
	if r.rubygemsSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rubygems.summary", r.rubygemsSummary, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.yumArchitecture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "yum.architecture", r.yumArchitecture, "form", "")
	}
	if r.yumName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "yum.name", r.yumName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
