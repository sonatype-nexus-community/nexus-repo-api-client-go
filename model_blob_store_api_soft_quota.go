/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.67.1-01.

API version: 3.67.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"encoding/json"
)

// checks if the BlobStoreApiSoftQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlobStoreApiSoftQuota{}

// BlobStoreApiSoftQuota struct for BlobStoreApiSoftQuota
type BlobStoreApiSoftQuota struct {
	// The limit in MB.
	Limit *int64 `json:"limit,omitempty"`
	// The type to use such as spaceRemainingQuota, or spaceUsedQuota
	Type *string `json:"type,omitempty"`
}

// NewBlobStoreApiSoftQuota instantiates a new BlobStoreApiSoftQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobStoreApiSoftQuota() *BlobStoreApiSoftQuota {
	this := BlobStoreApiSoftQuota{}
	return &this
}

// NewBlobStoreApiSoftQuotaWithDefaults instantiates a new BlobStoreApiSoftQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobStoreApiSoftQuotaWithDefaults() *BlobStoreApiSoftQuota {
	this := BlobStoreApiSoftQuota{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *BlobStoreApiSoftQuota) GetLimit() int64 {
	if o == nil || IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobStoreApiSoftQuota) GetLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *BlobStoreApiSoftQuota) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *BlobStoreApiSoftQuota) SetLimit(v int64) {
	o.Limit = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BlobStoreApiSoftQuota) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobStoreApiSoftQuota) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BlobStoreApiSoftQuota) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BlobStoreApiSoftQuota) SetType(v string) {
	o.Type = &v
}

func (o BlobStoreApiSoftQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlobStoreApiSoftQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableBlobStoreApiSoftQuota struct {
	value *BlobStoreApiSoftQuota
	isSet bool
}

func (v NullableBlobStoreApiSoftQuota) Get() *BlobStoreApiSoftQuota {
	return v.value
}

func (v *NullableBlobStoreApiSoftQuota) Set(val *BlobStoreApiSoftQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobStoreApiSoftQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobStoreApiSoftQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobStoreApiSoftQuota(val *BlobStoreApiSoftQuota) *NullableBlobStoreApiSoftQuota {
	return &NullableBlobStoreApiSoftQuota{value: val, isSet: true}
}

func (v NullableBlobStoreApiSoftQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobStoreApiSoftQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


