/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

API version: 3.85.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataStoreApiXO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStoreApiXO{}

// DataStoreApiXO struct for DataStoreApiXO
type DataStoreApiXO struct {
	Advanced *string `json:"advanced,omitempty"`
	// The JDBC connection URL for the data store.
	JdbcUrl string `json:"jdbcUrl"`
	// The name of the data store.
	Name *string `json:"name,omitempty"`
	Schema *string `json:"schema,omitempty"`
	// The source of the data store.
	Source *string `json:"source,omitempty"`
	// The type of the data store.
	Type *string `json:"type,omitempty"`
	// The username to use for the JDBC connection.
	Username *string `json:"username,omitempty"`
}

type _DataStoreApiXO DataStoreApiXO

// NewDataStoreApiXO instantiates a new DataStoreApiXO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStoreApiXO(jdbcUrl string) *DataStoreApiXO {
	this := DataStoreApiXO{}
	this.JdbcUrl = jdbcUrl
	return &this
}

// NewDataStoreApiXOWithDefaults instantiates a new DataStoreApiXO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreApiXOWithDefaults() *DataStoreApiXO {
	this := DataStoreApiXO{}
	return &this
}

// GetAdvanced returns the Advanced field value if set, zero value otherwise.
func (o *DataStoreApiXO) GetAdvanced() string {
	if o == nil || IsNil(o.Advanced) {
		var ret string
		return ret
	}
	return *o.Advanced
}

// GetAdvancedOk returns a tuple with the Advanced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreApiXO) GetAdvancedOk() (*string, bool) {
	if o == nil || IsNil(o.Advanced) {
		return nil, false
	}
	return o.Advanced, true
}

// HasAdvanced returns a boolean if a field has been set.
func (o *DataStoreApiXO) HasAdvanced() bool {
	if o != nil && !IsNil(o.Advanced) {
		return true
	}

	return false
}

// SetAdvanced gets a reference to the given string and assigns it to the Advanced field.
func (o *DataStoreApiXO) SetAdvanced(v string) {
	o.Advanced = &v
}

// GetJdbcUrl returns the JdbcUrl field value
func (o *DataStoreApiXO) GetJdbcUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JdbcUrl
}

// GetJdbcUrlOk returns a tuple with the JdbcUrl field value
// and a boolean to check if the value has been set.
func (o *DataStoreApiXO) GetJdbcUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JdbcUrl, true
}

// SetJdbcUrl sets field value
func (o *DataStoreApiXO) SetJdbcUrl(v string) {
	o.JdbcUrl = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataStoreApiXO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreApiXO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataStoreApiXO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataStoreApiXO) SetName(v string) {
	o.Name = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *DataStoreApiXO) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreApiXO) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *DataStoreApiXO) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *DataStoreApiXO) SetSchema(v string) {
	o.Schema = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DataStoreApiXO) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreApiXO) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DataStoreApiXO) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DataStoreApiXO) SetSource(v string) {
	o.Source = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DataStoreApiXO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreApiXO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DataStoreApiXO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DataStoreApiXO) SetType(v string) {
	o.Type = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *DataStoreApiXO) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreApiXO) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *DataStoreApiXO) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *DataStoreApiXO) SetUsername(v string) {
	o.Username = &v
}

func (o DataStoreApiXO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStoreApiXO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Advanced) {
		toSerialize["advanced"] = o.Advanced
	}
	toSerialize["jdbcUrl"] = o.JdbcUrl
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

func (o *DataStoreApiXO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jdbcUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataStoreApiXO := _DataStoreApiXO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataStoreApiXO)

	if err != nil {
		return err
	}

	*o = DataStoreApiXO(varDataStoreApiXO)

	return err
}

type NullableDataStoreApiXO struct {
	value *DataStoreApiXO
	isSet bool
}

func (v NullableDataStoreApiXO) Get() *DataStoreApiXO {
	return v.value
}

func (v *NullableDataStoreApiXO) Set(val *DataStoreApiXO) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreApiXO) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreApiXO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreApiXO(val *DataStoreApiXO) *NullableDataStoreApiXO {
	return &NullableDataStoreApiXO{value: val, isSet: true}
}

func (v NullableDataStoreApiXO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreApiXO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


