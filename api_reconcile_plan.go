/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.84.0-03.

API version: 3.84.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ReconcilePlanAPIService ReconcilePlanAPI service
type ReconcilePlanAPIService service

type ApiCreateReconciliationPlansRequest struct {
	ctx context.Context
	ApiService *ReconcilePlanAPIService
	repositories *[]string
	blobStores *[]string
	startDate *string
	endDate *string
	sinceDays *int32
	sinceHours *int32
	sinceMinutes *int32
}

// repository(ies) which should be processed with high priority
func (r ApiCreateReconciliationPlansRequest) Repositories(repositories []string) ApiCreateReconciliationPlansRequest {
	r.repositories = &repositories
	return r
}

func (r ApiCreateReconciliationPlansRequest) BlobStores(blobStores []string) ApiCreateReconciliationPlansRequest {
	r.blobStores = &blobStores
	return r
}

func (r ApiCreateReconciliationPlansRequest) StartDate(startDate string) ApiCreateReconciliationPlansRequest {
	r.startDate = &startDate
	return r
}

func (r ApiCreateReconciliationPlansRequest) EndDate(endDate string) ApiCreateReconciliationPlansRequest {
	r.endDate = &endDate
	return r
}

func (r ApiCreateReconciliationPlansRequest) SinceDays(sinceDays int32) ApiCreateReconciliationPlansRequest {
	r.sinceDays = &sinceDays
	return r
}

func (r ApiCreateReconciliationPlansRequest) SinceHours(sinceHours int32) ApiCreateReconciliationPlansRequest {
	r.sinceHours = &sinceHours
	return r
}

func (r ApiCreateReconciliationPlansRequest) SinceMinutes(sinceMinutes int32) ApiCreateReconciliationPlansRequest {
	r.sinceMinutes = &sinceMinutes
	return r
}

func (r ApiCreateReconciliationPlansRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateReconciliationPlansExecute(r)
}

/*
CreateReconciliationPlans Create reconciliation plans with selected parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateReconciliationPlansRequest
*/
func (a *ReconcilePlanAPIService) CreateReconciliationPlans(ctx context.Context) ApiCreateReconciliationPlansRequest {
	return ApiCreateReconciliationPlansRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ReconcilePlanAPIService) CreateReconciliationPlansExecute(r ApiCreateReconciliationPlansRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReconcilePlanAPIService.CreateReconciliationPlans")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/plan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.repositories != nil {
		t := *r.repositories
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "repositories", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "repositories", t, "form", "multi")
		}
	}
	if r.blobStores != nil {
		t := *r.blobStores
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blobStores", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blobStores", t, "form", "multi")
		}
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.sinceDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sinceDays", r.sinceDays, "form", "")
	}
	if r.sinceHours != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sinceHours", r.sinceHours, "form", "")
	}
	if r.sinceMinutes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sinceMinutes", r.sinceMinutes, "form", "")
	} else {
		var defaultValue int32 = 30
		r.sinceMinutes = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteAllPlansRequest struct {
	ctx context.Context
	ApiService *ReconcilePlanAPIService
}

func (r ApiDeleteAllPlansRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAllPlansExecute(r)
}

/*
DeleteAllPlans Delete all non executed reconciliation plans

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteAllPlansRequest
*/
func (a *ReconcilePlanAPIService) DeleteAllPlans(ctx context.Context) ApiDeleteAllPlansRequest {
	return ApiDeleteAllPlansRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ReconcilePlanAPIService) DeleteAllPlansExecute(r ApiDeleteAllPlansRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReconcilePlanAPIService.DeleteAllPlans")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/plan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePlanRequest struct {
	ctx context.Context
	ApiService *ReconcilePlanAPIService
	planId int32
}

func (r ApiDeletePlanRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePlanExecute(r)
}

/*
DeletePlan Delete a reconciliation plan based on its Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param planId Id of the plan to delete
 @return ApiDeletePlanRequest
*/
func (a *ReconcilePlanAPIService) DeletePlan(ctx context.Context, planId int32) ApiDeletePlanRequest {
	return ApiDeletePlanRequest{
		ApiService: a,
		ctx: ctx,
		planId: planId,
	}
}

// Execute executes the request
func (a *ReconcilePlanAPIService) DeletePlanExecute(r ApiDeletePlanRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReconcilePlanAPIService.DeletePlan")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/plan/{planId}"
	localVarPath = strings.Replace(localVarPath, "{"+"planId"+"}", url.PathEscape(parameterValueToString(r.planId, "planId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExecuteReconcileTaskByIdRequest struct {
	ctx context.Context
	ApiService *ReconcilePlanAPIService
	planId int32
}

func (r ApiExecuteReconcileTaskByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExecuteReconcileTaskByIdExecute(r)
}

/*
ExecuteReconcileTaskById Execute a reconciliation plan based on its Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param planId Id of the plan to execute
 @return ApiExecuteReconcileTaskByIdRequest
*/
func (a *ReconcilePlanAPIService) ExecuteReconcileTaskById(ctx context.Context, planId int32) ApiExecuteReconcileTaskByIdRequest {
	return ApiExecuteReconcileTaskByIdRequest{
		ApiService: a,
		ctx: ctx,
		planId: planId,
	}
}

// Execute executes the request
func (a *ReconcilePlanAPIService) ExecuteReconcileTaskByIdExecute(r ApiExecuteReconcileTaskByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReconcilePlanAPIService.ExecuteReconcileTaskById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/plan/{planId}"
	localVarPath = strings.Replace(localVarPath, "{"+"planId"+"}", url.PathEscape(parameterValueToString(r.planId, "planId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExecuteReconcileTasksRequest struct {
	ctx context.Context
	ApiService *ReconcilePlanAPIService
}

func (r ApiExecuteReconcileTasksRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExecuteReconcileTasksExecute(r)
}

/*
ExecuteReconcileTasks Execute all non executed reconciliation plans

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExecuteReconcileTasksRequest
*/
func (a *ReconcilePlanAPIService) ExecuteReconcileTasks(ctx context.Context) ApiExecuteReconcileTasksRequest {
	return ApiExecuteReconcileTasksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ReconcilePlanAPIService) ExecuteReconcileTasksExecute(r ApiExecuteReconcileTasksRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReconcilePlanAPIService.ExecuteReconcileTasks")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/plan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAvailablePlansRequest struct {
	ctx context.Context
	ApiService *ReconcilePlanAPIService
	continuationToken *string
}

// A token returned by a prior request. If present, the next page of results are returned
func (r ApiGetAvailablePlansRequest) ContinuationToken(continuationToken string) ApiGetAvailablePlansRequest {
	r.continuationToken = &continuationToken
	return r
}

func (r ApiGetAvailablePlansRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAvailablePlansExecute(r)
}

/*
GetAvailablePlans Get list of currently available plans

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAvailablePlansRequest
*/
func (a *ReconcilePlanAPIService) GetAvailablePlans(ctx context.Context) ApiGetAvailablePlansRequest {
	return ApiGetAvailablePlansRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ReconcilePlanAPIService) GetAvailablePlansExecute(r ApiGetAvailablePlansRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReconcilePlanAPIService.GetAvailablePlans")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/plan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continuationToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continuationToken", r.continuationToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPlanDetailsRequest struct {
	ctx context.Context
	ApiService *ReconcilePlanAPIService
	planId *int32
	state *string
	repository *string
	continuationToken *string
}

// Id of the plan
func (r ApiGetPlanDetailsRequest) PlanId(planId int32) ApiGetPlanDetailsRequest {
	r.planId = &planId
	return r
}

func (r ApiGetPlanDetailsRequest) State(state string) ApiGetPlanDetailsRequest {
	r.state = &state
	return r
}

func (r ApiGetPlanDetailsRequest) Repository(repository string) ApiGetPlanDetailsRequest {
	r.repository = &repository
	return r
}

// A token returned by a prior request. If present, the next page of results are returned
func (r ApiGetPlanDetailsRequest) ContinuationToken(continuationToken string) ApiGetPlanDetailsRequest {
	r.continuationToken = &continuationToken
	return r
}

func (r ApiGetPlanDetailsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetPlanDetailsExecute(r)
}

/*
GetPlanDetails Get reconciliation plan details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPlanDetailsRequest
*/
func (a *ReconcilePlanAPIService) GetPlanDetails(ctx context.Context) ApiGetPlanDetailsRequest {
	return ApiGetPlanDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ReconcilePlanAPIService) GetPlanDetailsExecute(r ApiGetPlanDetailsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReconcilePlanAPIService.GetPlanDetails")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/plan/details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.planId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "planId", r.planId, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository", r.repository, "form", "")
	}
	if r.continuationToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continuationToken", r.continuationToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSinglePlanWithDetailsRequest struct {
	ctx context.Context
	ApiService *ReconcilePlanAPIService
	planId int32
	repository *string
	continuationToken *string
}

func (r ApiGetSinglePlanWithDetailsRequest) Repository(repository string) ApiGetSinglePlanWithDetailsRequest {
	r.repository = &repository
	return r
}

// A token returned by a prior request. If present, the next page of results are returned
func (r ApiGetSinglePlanWithDetailsRequest) ContinuationToken(continuationToken string) ApiGetSinglePlanWithDetailsRequest {
	r.continuationToken = &continuationToken
	return r
}

func (r ApiGetSinglePlanWithDetailsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSinglePlanWithDetailsExecute(r)
}

/*
GetSinglePlanWithDetails Get single reconciliation plan with details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param planId Id of the plan
 @return ApiGetSinglePlanWithDetailsRequest
*/
func (a *ReconcilePlanAPIService) GetSinglePlanWithDetails(ctx context.Context, planId int32) ApiGetSinglePlanWithDetailsRequest {
	return ApiGetSinglePlanWithDetailsRequest{
		ApiService: a,
		ctx: ctx,
		planId: planId,
	}
}

// Execute executes the request
func (a *ReconcilePlanAPIService) GetSinglePlanWithDetailsExecute(r ApiGetSinglePlanWithDetailsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReconcilePlanAPIService.GetSinglePlanWithDetails")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/plan/{planId}"
	localVarPath = strings.Replace(localVarPath, "{"+"planId"+"}", url.PathEscape(parameterValueToString(r.planId, "planId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository", r.repository, "form", "")
	}
	if r.continuationToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continuationToken", r.continuationToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
