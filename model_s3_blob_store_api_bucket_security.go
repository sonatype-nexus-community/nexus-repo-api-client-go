/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.74.0-05.

API version: 3.74.0-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"encoding/json"
)

// checks if the S3BlobStoreApiBucketSecurity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3BlobStoreApiBucketSecurity{}

// S3BlobStoreApiBucketSecurity struct for S3BlobStoreApiBucketSecurity
type S3BlobStoreApiBucketSecurity struct {
	// An IAM access key ID for granting access to the S3 bucket
	AccessKeyId *string `json:"accessKeyId,omitempty"`
	// An IAM role to assume in order to access the S3 bucket
	Role *string `json:"role,omitempty"`
	// The secret access key associated with the specified IAM access key ID
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`
	// An AWS STS session token associated with temporary security credentials which grant access to the S3 bucket
	SessionToken *string `json:"sessionToken,omitempty"`
}

// NewS3BlobStoreApiBucketSecurity instantiates a new S3BlobStoreApiBucketSecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3BlobStoreApiBucketSecurity() *S3BlobStoreApiBucketSecurity {
	this := S3BlobStoreApiBucketSecurity{}
	return &this
}

// NewS3BlobStoreApiBucketSecurityWithDefaults instantiates a new S3BlobStoreApiBucketSecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3BlobStoreApiBucketSecurityWithDefaults() *S3BlobStoreApiBucketSecurity {
	this := S3BlobStoreApiBucketSecurity{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketSecurity) GetAccessKeyId() string {
	if o == nil || IsNil(o.AccessKeyId) {
		var ret string
		return ret
	}
	return *o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketSecurity) GetAccessKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKeyId) {
		return nil, false
	}
	return o.AccessKeyId, true
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketSecurity) HasAccessKeyId() bool {
	if o != nil && !IsNil(o.AccessKeyId) {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given string and assigns it to the AccessKeyId field.
func (o *S3BlobStoreApiBucketSecurity) SetAccessKeyId(v string) {
	o.AccessKeyId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketSecurity) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketSecurity) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketSecurity) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *S3BlobStoreApiBucketSecurity) SetRole(v string) {
	o.Role = &v
}

// GetSecretAccessKey returns the SecretAccessKey field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketSecurity) GetSecretAccessKey() string {
	if o == nil || IsNil(o.SecretAccessKey) {
		var ret string
		return ret
	}
	return *o.SecretAccessKey
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketSecurity) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretAccessKey) {
		return nil, false
	}
	return o.SecretAccessKey, true
}

// HasSecretAccessKey returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketSecurity) HasSecretAccessKey() bool {
	if o != nil && !IsNil(o.SecretAccessKey) {
		return true
	}

	return false
}

// SetSecretAccessKey gets a reference to the given string and assigns it to the SecretAccessKey field.
func (o *S3BlobStoreApiBucketSecurity) SetSecretAccessKey(v string) {
	o.SecretAccessKey = &v
}

// GetSessionToken returns the SessionToken field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketSecurity) GetSessionToken() string {
	if o == nil || IsNil(o.SessionToken) {
		var ret string
		return ret
	}
	return *o.SessionToken
}

// GetSessionTokenOk returns a tuple with the SessionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketSecurity) GetSessionTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SessionToken) {
		return nil, false
	}
	return o.SessionToken, true
}

// HasSessionToken returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketSecurity) HasSessionToken() bool {
	if o != nil && !IsNil(o.SessionToken) {
		return true
	}

	return false
}

// SetSessionToken gets a reference to the given string and assigns it to the SessionToken field.
func (o *S3BlobStoreApiBucketSecurity) SetSessionToken(v string) {
	o.SessionToken = &v
}

func (o S3BlobStoreApiBucketSecurity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3BlobStoreApiBucketSecurity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessKeyId) {
		toSerialize["accessKeyId"] = o.AccessKeyId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.SecretAccessKey) {
		toSerialize["secretAccessKey"] = o.SecretAccessKey
	}
	if !IsNil(o.SessionToken) {
		toSerialize["sessionToken"] = o.SessionToken
	}
	return toSerialize, nil
}

type NullableS3BlobStoreApiBucketSecurity struct {
	value *S3BlobStoreApiBucketSecurity
	isSet bool
}

func (v NullableS3BlobStoreApiBucketSecurity) Get() *S3BlobStoreApiBucketSecurity {
	return v.value
}

func (v *NullableS3BlobStoreApiBucketSecurity) Set(val *S3BlobStoreApiBucketSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableS3BlobStoreApiBucketSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableS3BlobStoreApiBucketSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3BlobStoreApiBucketSecurity(val *S3BlobStoreApiBucketSecurity) *NullableS3BlobStoreApiBucketSecurity {
	return &NullableS3BlobStoreApiBucketSecurity{value: val, isSet: true}
}

func (v NullableS3BlobStoreApiBucketSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3BlobStoreApiBucketSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


