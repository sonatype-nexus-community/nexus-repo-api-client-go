/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.84.0-03.

API version: 3.84.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the EulaStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EulaStatus{}

// EulaStatus struct for EulaStatus
type EulaStatus struct {
	Accepted *bool `json:"accepted,omitempty"`
	Disclaimer *string `json:"disclaimer,omitempty"`
}

// NewEulaStatus instantiates a new EulaStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEulaStatus() *EulaStatus {
	this := EulaStatus{}
	return &this
}

// NewEulaStatusWithDefaults instantiates a new EulaStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEulaStatusWithDefaults() *EulaStatus {
	this := EulaStatus{}
	return &this
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *EulaStatus) GetAccepted() bool {
	if o == nil || IsNil(o.Accepted) {
		var ret bool
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EulaStatus) GetAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Accepted) {
		return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *EulaStatus) HasAccepted() bool {
	if o != nil && !IsNil(o.Accepted) {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given bool and assigns it to the Accepted field.
func (o *EulaStatus) SetAccepted(v bool) {
	o.Accepted = &v
}

// GetDisclaimer returns the Disclaimer field value if set, zero value otherwise.
func (o *EulaStatus) GetDisclaimer() string {
	if o == nil || IsNil(o.Disclaimer) {
		var ret string
		return ret
	}
	return *o.Disclaimer
}

// GetDisclaimerOk returns a tuple with the Disclaimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EulaStatus) GetDisclaimerOk() (*string, bool) {
	if o == nil || IsNil(o.Disclaimer) {
		return nil, false
	}
	return o.Disclaimer, true
}

// HasDisclaimer returns a boolean if a field has been set.
func (o *EulaStatus) HasDisclaimer() bool {
	if o != nil && !IsNil(o.Disclaimer) {
		return true
	}

	return false
}

// SetDisclaimer gets a reference to the given string and assigns it to the Disclaimer field.
func (o *EulaStatus) SetDisclaimer(v string) {
	o.Disclaimer = &v
}

func (o EulaStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EulaStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accepted) {
		toSerialize["accepted"] = o.Accepted
	}
	if !IsNil(o.Disclaimer) {
		toSerialize["disclaimer"] = o.Disclaimer
	}
	return toSerialize, nil
}

type NullableEulaStatus struct {
	value *EulaStatus
	isSet bool
}

func (v NullableEulaStatus) Get() *EulaStatus {
	return v.value
}

func (v *NullableEulaStatus) Set(val *EulaStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEulaStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEulaStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEulaStatus(val *EulaStatus) *NullableEulaStatus {
	return &NullableEulaStatus{value: val, isSet: true}
}

func (v NullableEulaStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEulaStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


