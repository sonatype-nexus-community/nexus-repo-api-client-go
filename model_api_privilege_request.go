/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.82.0-08.

API version: 3.82.0-08
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiPrivilegeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiPrivilegeRequest{}

// ApiPrivilegeRequest struct for ApiPrivilegeRequest
type ApiPrivilegeRequest struct {
	// A collection of actions to associate with the privilege, using BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script privileges.  Only applicable for Privilege Types: repository-admin, repository-content-selector, repository-view, script
	Actions []string `json:"actions,omitempty"`
	// The name of a content selector that will be used to grant access to content via this privilege.  Only applicable for Privilege Types: repository-content-selector
	ContentSelector *string `json:"contentSelector,omitempty"`
	Description *string `json:"description,omitempty"`
	// The domain (i.e. 'blobstores', 'capabilities' or even '*' for all) that this privilege is granting access to. Note that creating new privileges with a domain is only necessary when using plugins that define their own domain(s).  Only applicable for Privilege Types: application
	Domain *string `json:"domain,omitempty"`
	// The repository format (i.e 'nuget', 'npm') this privilege will grant access to (or * for all).  Only applicable for Privilege Types: repository-admin, repository-content-selector, repository-view
	Format *string `json:"format,omitempty"`
	// The name of the privilege. This value cannot be changed.
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9\\\\-]{1}[a-zA-Z0-9_\\\\-\\\\.]*$"`
	// A colon separated list of parts that create a permission string.  Only applicable for Privilege Types: wildcard
	Pattern *string `json:"pattern,omitempty"`
	// Indicates whether the privilege can be changed. External values supplied to this will be ignored by the system.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// The name of the repository this privilege will grant access to (or * for all). The repository MUST exist.  Only applicable for Privilege Types: repository-admin, repository-content-selector, repository-view
	Repository *string `json:"repository,omitempty"`
	// The name of a script to give access to.  Only applicable for Privilege Types: script
	ScriptName *string `json:"scriptName,omitempty"`
	// The type of privilege, each type covers different portion of the system. External values supplied to this will be ignored by the system.
	Type string `json:"type"`
}

type _ApiPrivilegeRequest ApiPrivilegeRequest

// NewApiPrivilegeRequest instantiates a new ApiPrivilegeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiPrivilegeRequest(name string, type_ string) *ApiPrivilegeRequest {
	this := ApiPrivilegeRequest{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewApiPrivilegeRequestWithDefaults instantiates a new ApiPrivilegeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiPrivilegeRequestWithDefaults() *ApiPrivilegeRequest {
	this := ApiPrivilegeRequest{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetActions() []string {
	if o == nil || IsNil(o.Actions) {
		var ret []string
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *ApiPrivilegeRequest) SetActions(v []string) {
	o.Actions = v
}

// GetContentSelector returns the ContentSelector field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetContentSelector() string {
	if o == nil || IsNil(o.ContentSelector) {
		var ret string
		return ret
	}
	return *o.ContentSelector
}

// GetContentSelectorOk returns a tuple with the ContentSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetContentSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.ContentSelector) {
		return nil, false
	}
	return o.ContentSelector, true
}

// HasContentSelector returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasContentSelector() bool {
	if o != nil && !IsNil(o.ContentSelector) {
		return true
	}

	return false
}

// SetContentSelector gets a reference to the given string and assigns it to the ContentSelector field.
func (o *ApiPrivilegeRequest) SetContentSelector(v string) {
	o.ContentSelector = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApiPrivilegeRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ApiPrivilegeRequest) SetDomain(v string) {
	o.Domain = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ApiPrivilegeRequest) SetFormat(v string) {
	o.Format = &v
}

// GetName returns the Name field value
func (o *ApiPrivilegeRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiPrivilegeRequest) SetName(v string) {
	o.Name = v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *ApiPrivilegeRequest) SetPattern(v string) {
	o.Pattern = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *ApiPrivilegeRequest) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *ApiPrivilegeRequest) SetRepository(v string) {
	o.Repository = &v
}

// GetScriptName returns the ScriptName field value if set, zero value otherwise.
func (o *ApiPrivilegeRequest) GetScriptName() string {
	if o == nil || IsNil(o.ScriptName) {
		var ret string
		return ret
	}
	return *o.ScriptName
}

// GetScriptNameOk returns a tuple with the ScriptName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetScriptNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScriptName) {
		return nil, false
	}
	return o.ScriptName, true
}

// HasScriptName returns a boolean if a field has been set.
func (o *ApiPrivilegeRequest) HasScriptName() bool {
	if o != nil && !IsNil(o.ScriptName) {
		return true
	}

	return false
}

// SetScriptName gets a reference to the given string and assigns it to the ScriptName field.
func (o *ApiPrivilegeRequest) SetScriptName(v string) {
	o.ScriptName = &v
}

// GetType returns the Type field value
func (o *ApiPrivilegeRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiPrivilegeRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiPrivilegeRequest) SetType(v string) {
	o.Type = v
}

func (o ApiPrivilegeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiPrivilegeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.ContentSelector) {
		toSerialize["contentSelector"] = o.ContentSelector
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.ScriptName) {
		toSerialize["scriptName"] = o.ScriptName
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ApiPrivilegeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiPrivilegeRequest := _ApiPrivilegeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiPrivilegeRequest)

	if err != nil {
		return err
	}

	*o = ApiPrivilegeRequest(varApiPrivilegeRequest)

	return err
}

type NullableApiPrivilegeRequest struct {
	value *ApiPrivilegeRequest
	isSet bool
}

func (v NullableApiPrivilegeRequest) Get() *ApiPrivilegeRequest {
	return v.value
}

func (v *NullableApiPrivilegeRequest) Set(val *ApiPrivilegeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiPrivilegeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiPrivilegeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiPrivilegeRequest(val *ApiPrivilegeRequest) *NullableApiPrivilegeRequest {
	return &NullableApiPrivilegeRequest{value: val, isSet: true}
}

func (v NullableApiPrivilegeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiPrivilegeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


