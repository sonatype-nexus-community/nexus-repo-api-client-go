/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.81.1-01.

API version: 3.81.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SecurityManagementPrivilegesAPIService SecurityManagementPrivilegesAPI service
type SecurityManagementPrivilegesAPIService service

type ApiCreateApplicationPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeApplicationRequest
}

// The privilege to create.
func (r ApiCreateApplicationPrivilegeRequest) Body(body ApiPrivilegeApplicationRequest) ApiCreateApplicationPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiCreateApplicationPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateApplicationPrivilegeExecute(r)
}

/*
CreateApplicationPrivilege Create an application type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateApplicationPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) CreateApplicationPrivilege(ctx context.Context) ApiCreateApplicationPrivilegeRequest {
	return ApiCreateApplicationPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreateApplicationPrivilegeExecute(r ApiCreateApplicationPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreateApplicationPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/application"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateRepositoryAdminPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeRepositoryAdminRequest
}

// The privilege to create.
func (r ApiCreateRepositoryAdminPrivilegeRequest) Body(body ApiPrivilegeRepositoryAdminRequest) ApiCreateRepositoryAdminPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiCreateRepositoryAdminPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateRepositoryAdminPrivilegeExecute(r)
}

/*
CreateRepositoryAdminPrivilege Create a repository admin type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRepositoryAdminPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) CreateRepositoryAdminPrivilege(ctx context.Context) ApiCreateRepositoryAdminPrivilegeRequest {
	return ApiCreateRepositoryAdminPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreateRepositoryAdminPrivilegeExecute(r ApiCreateRepositoryAdminPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreateRepositoryAdminPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-admin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateRepositoryContentSelectorPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeRepositoryContentSelectorRequest
}

// The privilege to create.
func (r ApiCreateRepositoryContentSelectorPrivilegeRequest) Body(body ApiPrivilegeRepositoryContentSelectorRequest) ApiCreateRepositoryContentSelectorPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiCreateRepositoryContentSelectorPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateRepositoryContentSelectorPrivilegeExecute(r)
}

/*
CreateRepositoryContentSelectorPrivilege Create a repository content selector type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRepositoryContentSelectorPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) CreateRepositoryContentSelectorPrivilege(ctx context.Context) ApiCreateRepositoryContentSelectorPrivilegeRequest {
	return ApiCreateRepositoryContentSelectorPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreateRepositoryContentSelectorPrivilegeExecute(r ApiCreateRepositoryContentSelectorPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreateRepositoryContentSelectorPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-content-selector"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateRepositoryViewPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeRepositoryViewRequest
}

// The privilege to create.
func (r ApiCreateRepositoryViewPrivilegeRequest) Body(body ApiPrivilegeRepositoryViewRequest) ApiCreateRepositoryViewPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiCreateRepositoryViewPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateRepositoryViewPrivilegeExecute(r)
}

/*
CreateRepositoryViewPrivilege Create a repository view type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRepositoryViewPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) CreateRepositoryViewPrivilege(ctx context.Context) ApiCreateRepositoryViewPrivilegeRequest {
	return ApiCreateRepositoryViewPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreateRepositoryViewPrivilegeExecute(r ApiCreateRepositoryViewPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreateRepositoryViewPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-view"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateScriptPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeScriptRequest
}

// The privilege to create.
func (r ApiCreateScriptPrivilegeRequest) Body(body ApiPrivilegeScriptRequest) ApiCreateScriptPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiCreateScriptPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateScriptPrivilegeExecute(r)
}

/*
CreateScriptPrivilege Create a script type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateScriptPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) CreateScriptPrivilege(ctx context.Context) ApiCreateScriptPrivilegeRequest {
	return ApiCreateScriptPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreateScriptPrivilegeExecute(r ApiCreateScriptPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreateScriptPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/script"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateWildcardPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeWildcardRequest
}

// The privilege to create.
func (r ApiCreateWildcardPrivilegeRequest) Body(body ApiPrivilegeWildcardRequest) ApiCreateWildcardPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiCreateWildcardPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateWildcardPrivilegeExecute(r)
}

/*
CreateWildcardPrivilege Create a wildcard type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateWildcardPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) CreateWildcardPrivilege(ctx context.Context) ApiCreateWildcardPrivilegeRequest {
	return ApiCreateWildcardPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreateWildcardPrivilegeExecute(r ApiCreateWildcardPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreateWildcardPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/wildcard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
}

func (r ApiDeletePrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePrivilegeExecute(r)
}

/*
DeletePrivilege Delete a privilege by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to delete.
 @return ApiDeletePrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) DeletePrivilege(ctx context.Context, privilegeName string) ApiDeletePrivilegeRequest {
	return ApiDeletePrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) DeletePrivilegeExecute(r ApiDeletePrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.DeletePrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllPrivilegesRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
}

func (r ApiGetAllPrivilegesRequest) Execute() (*ApiPrivilegeRequest, *http.Response, error) {
	return r.ApiService.GetAllPrivilegesExecute(r)
}

/*
GetAllPrivileges Retrieve a list of privileges.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllPrivilegesRequest
*/
func (a *SecurityManagementPrivilegesAPIService) GetAllPrivileges(ctx context.Context) ApiGetAllPrivilegesRequest {
	return ApiGetAllPrivilegesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiPrivilegeRequest
func (a *SecurityManagementPrivilegesAPIService) GetAllPrivilegesExecute(r ApiGetAllPrivilegesRequest) (*ApiPrivilegeRequest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiPrivilegeRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.GetAllPrivileges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
}

func (r ApiGetPrivilegeRequest) Execute() (*ApiPrivilegeRequest, *http.Response, error) {
	return r.ApiService.GetPrivilegeExecute(r)
}

/*
GetPrivilege Retrieve a privilege by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to retrieve.
 @return ApiGetPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) GetPrivilege(ctx context.Context, privilegeName string) ApiGetPrivilegeRequest {
	return ApiGetPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
//  @return ApiPrivilegeRequest
func (a *SecurityManagementPrivilegesAPIService) GetPrivilegeExecute(r ApiGetPrivilegeRequest) (*ApiPrivilegeRequest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiPrivilegeRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.GetPrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateApplicationPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeApplicationRequest
}

// The privilege to update.
func (r ApiUpdateApplicationPrivilegeRequest) Body(body ApiPrivilegeApplicationRequest) ApiUpdateApplicationPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiUpdateApplicationPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateApplicationPrivilegeExecute(r)
}

/*
UpdateApplicationPrivilege Update an application type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdateApplicationPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) UpdateApplicationPrivilege(ctx context.Context, privilegeName string) ApiUpdateApplicationPrivilegeRequest {
	return ApiUpdateApplicationPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdateApplicationPrivilegeExecute(r ApiUpdateApplicationPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdateApplicationPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/application/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateRepositoryAdminPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeRepositoryAdminRequest
}

// The privilege to update.
func (r ApiUpdateRepositoryAdminPrivilegeRequest) Body(body ApiPrivilegeRepositoryAdminRequest) ApiUpdateRepositoryAdminPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiUpdateRepositoryAdminPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateRepositoryAdminPrivilegeExecute(r)
}

/*
UpdateRepositoryAdminPrivilege Update a repository admin type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdateRepositoryAdminPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) UpdateRepositoryAdminPrivilege(ctx context.Context, privilegeName string) ApiUpdateRepositoryAdminPrivilegeRequest {
	return ApiUpdateRepositoryAdminPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdateRepositoryAdminPrivilegeExecute(r ApiUpdateRepositoryAdminPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdateRepositoryAdminPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-admin/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateRepositoryContentSelectorPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeRepositoryContentSelectorRequest
}

// The privilege to update.
func (r ApiUpdateRepositoryContentSelectorPrivilegeRequest) Body(body ApiPrivilegeRepositoryContentSelectorRequest) ApiUpdateRepositoryContentSelectorPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiUpdateRepositoryContentSelectorPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateRepositoryContentSelectorPrivilegeExecute(r)
}

/*
UpdateRepositoryContentSelectorPrivilege Update a repository content selector type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdateRepositoryContentSelectorPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) UpdateRepositoryContentSelectorPrivilege(ctx context.Context, privilegeName string) ApiUpdateRepositoryContentSelectorPrivilegeRequest {
	return ApiUpdateRepositoryContentSelectorPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdateRepositoryContentSelectorPrivilegeExecute(r ApiUpdateRepositoryContentSelectorPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdateRepositoryContentSelectorPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-content-selector/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateRepositoryViewPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeRepositoryViewRequest
}

// The privilege to update.
func (r ApiUpdateRepositoryViewPrivilegeRequest) Body(body ApiPrivilegeRepositoryViewRequest) ApiUpdateRepositoryViewPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiUpdateRepositoryViewPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateRepositoryViewPrivilegeExecute(r)
}

/*
UpdateRepositoryViewPrivilege Update a repository view type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdateRepositoryViewPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) UpdateRepositoryViewPrivilege(ctx context.Context, privilegeName string) ApiUpdateRepositoryViewPrivilegeRequest {
	return ApiUpdateRepositoryViewPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdateRepositoryViewPrivilegeExecute(r ApiUpdateRepositoryViewPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdateRepositoryViewPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-view/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateScriptPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeScriptRequest
}

// The privilege to update.
func (r ApiUpdateScriptPrivilegeRequest) Body(body ApiPrivilegeScriptRequest) ApiUpdateScriptPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiUpdateScriptPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateScriptPrivilegeExecute(r)
}

/*
UpdateScriptPrivilege Update a script type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdateScriptPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) UpdateScriptPrivilege(ctx context.Context, privilegeName string) ApiUpdateScriptPrivilegeRequest {
	return ApiUpdateScriptPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdateScriptPrivilegeExecute(r ApiUpdateScriptPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdateScriptPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/script/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateWildcardPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeWildcardRequest
}

// The privilege to update.
func (r ApiUpdateWildcardPrivilegeRequest) Body(body ApiPrivilegeWildcardRequest) ApiUpdateWildcardPrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiUpdateWildcardPrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateWildcardPrivilegeExecute(r)
}

/*
UpdateWildcardPrivilege Update a wildcard type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdateWildcardPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) UpdateWildcardPrivilege(ctx context.Context, privilegeName string) ApiUpdateWildcardPrivilegeRequest {
	return ApiUpdateWildcardPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdateWildcardPrivilegeExecute(r ApiUpdateWildcardPrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdateWildcardPrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/wildcard/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
