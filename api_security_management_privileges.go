/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.67.1-01.

API version: 3.67.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SecurityManagementPrivilegesAPIService SecurityManagementPrivilegesAPI service
type SecurityManagementPrivilegesAPIService service

type ApiCreatePrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeWildcardRequest
}

// The privilege to create.
func (r ApiCreatePrivilegeRequest) Body(body ApiPrivilegeWildcardRequest) ApiCreatePrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiCreatePrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreatePrivilegeExecute(r)
}

/*
CreatePrivilege Create a wildcard type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege(ctx context.Context) ApiCreatePrivilegeRequest {
	return ApiCreatePrivilegeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilegeExecute(r ApiCreatePrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreatePrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/wildcard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreatePrivilege1Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeApplicationRequest
}

// The privilege to create.
func (r ApiCreatePrivilege1Request) Body(body ApiPrivilegeApplicationRequest) ApiCreatePrivilege1Request {
	r.body = &body
	return r
}

func (r ApiCreatePrivilege1Request) Execute() (*http.Response, error) {
	return r.ApiService.CreatePrivilege1Execute(r)
}

/*
CreatePrivilege1 Create an application type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePrivilege1Request
*/
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege1(ctx context.Context) ApiCreatePrivilege1Request {
	return ApiCreatePrivilege1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege1Execute(r ApiCreatePrivilege1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreatePrivilege1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/application"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreatePrivilege2Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeRepositoryContentSelectorRequest
}

// The privilege to create.
func (r ApiCreatePrivilege2Request) Body(body ApiPrivilegeRepositoryContentSelectorRequest) ApiCreatePrivilege2Request {
	r.body = &body
	return r
}

func (r ApiCreatePrivilege2Request) Execute() (*http.Response, error) {
	return r.ApiService.CreatePrivilege2Execute(r)
}

/*
CreatePrivilege2 Create a repository content selector type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePrivilege2Request
*/
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege2(ctx context.Context) ApiCreatePrivilege2Request {
	return ApiCreatePrivilege2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege2Execute(r ApiCreatePrivilege2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreatePrivilege2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-content-selector"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreatePrivilege3Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeRepositoryAdminRequest
}

// The privilege to create.
func (r ApiCreatePrivilege3Request) Body(body ApiPrivilegeRepositoryAdminRequest) ApiCreatePrivilege3Request {
	r.body = &body
	return r
}

func (r ApiCreatePrivilege3Request) Execute() (*http.Response, error) {
	return r.ApiService.CreatePrivilege3Execute(r)
}

/*
CreatePrivilege3 Create a repository admin type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePrivilege3Request
*/
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege3(ctx context.Context) ApiCreatePrivilege3Request {
	return ApiCreatePrivilege3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege3Execute(r ApiCreatePrivilege3Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreatePrivilege3")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-admin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreatePrivilege4Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeRepositoryViewRequest
}

// The privilege to create.
func (r ApiCreatePrivilege4Request) Body(body ApiPrivilegeRepositoryViewRequest) ApiCreatePrivilege4Request {
	r.body = &body
	return r
}

func (r ApiCreatePrivilege4Request) Execute() (*http.Response, error) {
	return r.ApiService.CreatePrivilege4Execute(r)
}

/*
CreatePrivilege4 Create a repository view type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePrivilege4Request
*/
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege4(ctx context.Context) ApiCreatePrivilege4Request {
	return ApiCreatePrivilege4Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege4Execute(r ApiCreatePrivilege4Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreatePrivilege4")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-view"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreatePrivilege5Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	body *ApiPrivilegeScriptRequest
}

// The privilege to create.
func (r ApiCreatePrivilege5Request) Body(body ApiPrivilegeScriptRequest) ApiCreatePrivilege5Request {
	r.body = &body
	return r
}

func (r ApiCreatePrivilege5Request) Execute() (*http.Response, error) {
	return r.ApiService.CreatePrivilege5Execute(r)
}

/*
CreatePrivilege5 Create a script type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePrivilege5Request
*/
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege5(ctx context.Context) ApiCreatePrivilege5Request {
	return ApiCreatePrivilege5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) CreatePrivilege5Execute(r ApiCreatePrivilege5Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.CreatePrivilege5")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/script"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
}

func (r ApiDeletePrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePrivilegeExecute(r)
}

/*
DeletePrivilege Delete a privilege by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to delete.
 @return ApiDeletePrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) DeletePrivilege(ctx context.Context, privilegeName string) ApiDeletePrivilegeRequest {
	return ApiDeletePrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) DeletePrivilegeExecute(r ApiDeletePrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.DeletePrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
}

func (r ApiGetPrivilegeRequest) Execute() (*ApiPrivilege, *http.Response, error) {
	return r.ApiService.GetPrivilegeExecute(r)
}

/*
GetPrivilege Retrieve a privilege by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to retrieve.
 @return ApiGetPrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) GetPrivilege(ctx context.Context, privilegeName string) ApiGetPrivilegeRequest {
	return ApiGetPrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
//  @return ApiPrivilege
func (a *SecurityManagementPrivilegesAPIService) GetPrivilegeExecute(r ApiGetPrivilegeRequest) (*ApiPrivilege, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiPrivilege
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.GetPrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPrivilegesRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
}

func (r ApiGetPrivilegesRequest) Execute() ([]ApiPrivilege, *http.Response, error) {
	return r.ApiService.GetPrivilegesExecute(r)
}

/*
GetPrivileges Retrieve a list of privileges.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPrivilegesRequest
*/
func (a *SecurityManagementPrivilegesAPIService) GetPrivileges(ctx context.Context) ApiGetPrivilegesRequest {
	return ApiGetPrivilegesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ApiPrivilege
func (a *SecurityManagementPrivilegesAPIService) GetPrivilegesExecute(r ApiGetPrivilegesRequest) ([]ApiPrivilege, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiPrivilege
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.GetPrivileges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePrivilegeRequest struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeWildcardRequest
}

// The privilege to update.
func (r ApiUpdatePrivilegeRequest) Body(body ApiPrivilegeWildcardRequest) ApiUpdatePrivilegeRequest {
	r.body = &body
	return r
}

func (r ApiUpdatePrivilegeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePrivilegeExecute(r)
}

/*
UpdatePrivilege Update a wildcard type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdatePrivilegeRequest
*/
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege(ctx context.Context, privilegeName string) ApiUpdatePrivilegeRequest {
	return ApiUpdatePrivilegeRequest{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilegeExecute(r ApiUpdatePrivilegeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdatePrivilege")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/wildcard/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdatePrivilege1Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeApplicationRequest
}

// The privilege to update.
func (r ApiUpdatePrivilege1Request) Body(body ApiPrivilegeApplicationRequest) ApiUpdatePrivilege1Request {
	r.body = &body
	return r
}

func (r ApiUpdatePrivilege1Request) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePrivilege1Execute(r)
}

/*
UpdatePrivilege1 Update an application type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdatePrivilege1Request
*/
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege1(ctx context.Context, privilegeName string) ApiUpdatePrivilege1Request {
	return ApiUpdatePrivilege1Request{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege1Execute(r ApiUpdatePrivilege1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdatePrivilege1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/application/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdatePrivilege2Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeRepositoryViewRequest
}

// The privilege to update.
func (r ApiUpdatePrivilege2Request) Body(body ApiPrivilegeRepositoryViewRequest) ApiUpdatePrivilege2Request {
	r.body = &body
	return r
}

func (r ApiUpdatePrivilege2Request) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePrivilege2Execute(r)
}

/*
UpdatePrivilege2 Update a repository view type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdatePrivilege2Request
*/
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege2(ctx context.Context, privilegeName string) ApiUpdatePrivilege2Request {
	return ApiUpdatePrivilege2Request{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege2Execute(r ApiUpdatePrivilege2Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdatePrivilege2")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-view/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdatePrivilege3Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeRepositoryContentSelectorRequest
}

// The privilege to update.
func (r ApiUpdatePrivilege3Request) Body(body ApiPrivilegeRepositoryContentSelectorRequest) ApiUpdatePrivilege3Request {
	r.body = &body
	return r
}

func (r ApiUpdatePrivilege3Request) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePrivilege3Execute(r)
}

/*
UpdatePrivilege3 Update a repository content selector type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdatePrivilege3Request
*/
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege3(ctx context.Context, privilegeName string) ApiUpdatePrivilege3Request {
	return ApiUpdatePrivilege3Request{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege3Execute(r ApiUpdatePrivilege3Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdatePrivilege3")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-content-selector/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdatePrivilege4Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeRepositoryAdminRequest
}

// The privilege to update.
func (r ApiUpdatePrivilege4Request) Body(body ApiPrivilegeRepositoryAdminRequest) ApiUpdatePrivilege4Request {
	r.body = &body
	return r
}

func (r ApiUpdatePrivilege4Request) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePrivilege4Execute(r)
}

/*
UpdatePrivilege4 Update a repository admin type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdatePrivilege4Request
*/
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege4(ctx context.Context, privilegeName string) ApiUpdatePrivilege4Request {
	return ApiUpdatePrivilege4Request{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege4Execute(r ApiUpdatePrivilege4Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdatePrivilege4")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/repository-admin/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdatePrivilege5Request struct {
	ctx context.Context
	ApiService *SecurityManagementPrivilegesAPIService
	privilegeName string
	body *ApiPrivilegeScriptRequest
}

// The privilege to update.
func (r ApiUpdatePrivilege5Request) Body(body ApiPrivilegeScriptRequest) ApiUpdatePrivilege5Request {
	r.body = &body
	return r
}

func (r ApiUpdatePrivilege5Request) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePrivilege5Execute(r)
}

/*
UpdatePrivilege5 Update a script type privilege.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param privilegeName The name of the privilege to update.
 @return ApiUpdatePrivilege5Request
*/
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege5(ctx context.Context, privilegeName string) ApiUpdatePrivilege5Request {
	return ApiUpdatePrivilege5Request{
		ApiService: a,
		ctx: ctx,
		privilegeName: privilegeName,
	}
}

// Execute executes the request
func (a *SecurityManagementPrivilegesAPIService) UpdatePrivilege5Execute(r ApiUpdatePrivilege5Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityManagementPrivilegesAPIService.UpdatePrivilege5")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/security/privileges/script/{privilegeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"privilegeName"+"}", url.PathEscape(parameterValueToString(r.privilegeName, "privilegeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
