/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.81.1-01.

API version: 3.81.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProxySettingsXo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProxySettingsXo{}

// ProxySettingsXo struct for ProxySettingsXo
type ProxySettingsXo struct {
	AuthInfo AuthSettingsXo `json:"authInfo"`
	// proxy enabled
	Enabled bool `json:"enabled"`
	// proxy host
	Host string `json:"host"`
	// proxy port
	Port string `json:"port"`
}

type _ProxySettingsXo ProxySettingsXo

// NewProxySettingsXo instantiates a new ProxySettingsXo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProxySettingsXo(authInfo AuthSettingsXo, enabled bool, host string, port string) *ProxySettingsXo {
	this := ProxySettingsXo{}
	this.AuthInfo = authInfo
	this.Enabled = enabled
	this.Host = host
	this.Port = port
	return &this
}

// NewProxySettingsXoWithDefaults instantiates a new ProxySettingsXo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProxySettingsXoWithDefaults() *ProxySettingsXo {
	this := ProxySettingsXo{}
	return &this
}

// GetAuthInfo returns the AuthInfo field value
func (o *ProxySettingsXo) GetAuthInfo() AuthSettingsXo {
	if o == nil {
		var ret AuthSettingsXo
		return ret
	}

	return o.AuthInfo
}

// GetAuthInfoOk returns a tuple with the AuthInfo field value
// and a boolean to check if the value has been set.
func (o *ProxySettingsXo) GetAuthInfoOk() (*AuthSettingsXo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthInfo, true
}

// SetAuthInfo sets field value
func (o *ProxySettingsXo) SetAuthInfo(v AuthSettingsXo) {
	o.AuthInfo = v
}

// GetEnabled returns the Enabled field value
func (o *ProxySettingsXo) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ProxySettingsXo) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ProxySettingsXo) SetEnabled(v bool) {
	o.Enabled = v
}

// GetHost returns the Host field value
func (o *ProxySettingsXo) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *ProxySettingsXo) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *ProxySettingsXo) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *ProxySettingsXo) GetPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ProxySettingsXo) GetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *ProxySettingsXo) SetPort(v string) {
	o.Port = v
}

func (o ProxySettingsXo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProxySettingsXo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authInfo"] = o.AuthInfo
	toSerialize["enabled"] = o.Enabled
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	return toSerialize, nil
}

func (o *ProxySettingsXo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authInfo",
		"enabled",
		"host",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProxySettingsXo := _ProxySettingsXo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProxySettingsXo)

	if err != nil {
		return err
	}

	*o = ProxySettingsXo(varProxySettingsXo)

	return err
}

type NullableProxySettingsXo struct {
	value *ProxySettingsXo
	isSet bool
}

func (v NullableProxySettingsXo) Get() *ProxySettingsXo {
	return v.value
}

func (v *NullableProxySettingsXo) Set(val *ProxySettingsXo) {
	v.value = val
	v.isSet = true
}

func (v NullableProxySettingsXo) IsSet() bool {
	return v.isSet
}

func (v *NullableProxySettingsXo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxySettingsXo(val *ProxySettingsXo) *NullableProxySettingsXo {
	return &NullableProxySettingsXo{value: val, isSet: true}
}

func (v NullableProxySettingsXo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxySettingsXo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


