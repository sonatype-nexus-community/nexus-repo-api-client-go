/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

API version: 3.85.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ConfigurationApplyResponseXO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationApplyResponseXO{}

// ConfigurationApplyResponseXO struct for ConfigurationApplyResponseXO
type ConfigurationApplyResponseXO struct {
	AppliedConfigurations []ApplyStatusXO `json:"appliedConfigurations,omitempty"`
	FailedConfigurations []ApplyStatusXO `json:"failedConfigurations,omitempty"`
	NotAppliedConfigurations []ApplyStatusXO `json:"notAppliedConfigurations,omitempty"`
}

// NewConfigurationApplyResponseXO instantiates a new ConfigurationApplyResponseXO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationApplyResponseXO() *ConfigurationApplyResponseXO {
	this := ConfigurationApplyResponseXO{}
	return &this
}

// NewConfigurationApplyResponseXOWithDefaults instantiates a new ConfigurationApplyResponseXO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationApplyResponseXOWithDefaults() *ConfigurationApplyResponseXO {
	this := ConfigurationApplyResponseXO{}
	return &this
}

// GetAppliedConfigurations returns the AppliedConfigurations field value if set, zero value otherwise.
func (o *ConfigurationApplyResponseXO) GetAppliedConfigurations() []ApplyStatusXO {
	if o == nil || IsNil(o.AppliedConfigurations) {
		var ret []ApplyStatusXO
		return ret
	}
	return o.AppliedConfigurations
}

// GetAppliedConfigurationsOk returns a tuple with the AppliedConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationApplyResponseXO) GetAppliedConfigurationsOk() ([]ApplyStatusXO, bool) {
	if o == nil || IsNil(o.AppliedConfigurations) {
		return nil, false
	}
	return o.AppliedConfigurations, true
}

// HasAppliedConfigurations returns a boolean if a field has been set.
func (o *ConfigurationApplyResponseXO) HasAppliedConfigurations() bool {
	if o != nil && !IsNil(o.AppliedConfigurations) {
		return true
	}

	return false
}

// SetAppliedConfigurations gets a reference to the given []ApplyStatusXO and assigns it to the AppliedConfigurations field.
func (o *ConfigurationApplyResponseXO) SetAppliedConfigurations(v []ApplyStatusXO) {
	o.AppliedConfigurations = v
}

// GetFailedConfigurations returns the FailedConfigurations field value if set, zero value otherwise.
func (o *ConfigurationApplyResponseXO) GetFailedConfigurations() []ApplyStatusXO {
	if o == nil || IsNil(o.FailedConfigurations) {
		var ret []ApplyStatusXO
		return ret
	}
	return o.FailedConfigurations
}

// GetFailedConfigurationsOk returns a tuple with the FailedConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationApplyResponseXO) GetFailedConfigurationsOk() ([]ApplyStatusXO, bool) {
	if o == nil || IsNil(o.FailedConfigurations) {
		return nil, false
	}
	return o.FailedConfigurations, true
}

// HasFailedConfigurations returns a boolean if a field has been set.
func (o *ConfigurationApplyResponseXO) HasFailedConfigurations() bool {
	if o != nil && !IsNil(o.FailedConfigurations) {
		return true
	}

	return false
}

// SetFailedConfigurations gets a reference to the given []ApplyStatusXO and assigns it to the FailedConfigurations field.
func (o *ConfigurationApplyResponseXO) SetFailedConfigurations(v []ApplyStatusXO) {
	o.FailedConfigurations = v
}

// GetNotAppliedConfigurations returns the NotAppliedConfigurations field value if set, zero value otherwise.
func (o *ConfigurationApplyResponseXO) GetNotAppliedConfigurations() []ApplyStatusXO {
	if o == nil || IsNil(o.NotAppliedConfigurations) {
		var ret []ApplyStatusXO
		return ret
	}
	return o.NotAppliedConfigurations
}

// GetNotAppliedConfigurationsOk returns a tuple with the NotAppliedConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationApplyResponseXO) GetNotAppliedConfigurationsOk() ([]ApplyStatusXO, bool) {
	if o == nil || IsNil(o.NotAppliedConfigurations) {
		return nil, false
	}
	return o.NotAppliedConfigurations, true
}

// HasNotAppliedConfigurations returns a boolean if a field has been set.
func (o *ConfigurationApplyResponseXO) HasNotAppliedConfigurations() bool {
	if o != nil && !IsNil(o.NotAppliedConfigurations) {
		return true
	}

	return false
}

// SetNotAppliedConfigurations gets a reference to the given []ApplyStatusXO and assigns it to the NotAppliedConfigurations field.
func (o *ConfigurationApplyResponseXO) SetNotAppliedConfigurations(v []ApplyStatusXO) {
	o.NotAppliedConfigurations = v
}

func (o ConfigurationApplyResponseXO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationApplyResponseXO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppliedConfigurations) {
		toSerialize["appliedConfigurations"] = o.AppliedConfigurations
	}
	if !IsNil(o.FailedConfigurations) {
		toSerialize["failedConfigurations"] = o.FailedConfigurations
	}
	if !IsNil(o.NotAppliedConfigurations) {
		toSerialize["notAppliedConfigurations"] = o.NotAppliedConfigurations
	}
	return toSerialize, nil
}

type NullableConfigurationApplyResponseXO struct {
	value *ConfigurationApplyResponseXO
	isSet bool
}

func (v NullableConfigurationApplyResponseXO) Get() *ConfigurationApplyResponseXO {
	return v.value
}

func (v *NullableConfigurationApplyResponseXO) Set(val *ConfigurationApplyResponseXO) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationApplyResponseXO) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationApplyResponseXO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationApplyResponseXO(val *ConfigurationApplyResponseXO) *NullableConfigurationApplyResponseXO {
	return &NullableConfigurationApplyResponseXO{value: val, isSet: true}
}

func (v NullableConfigurationApplyResponseXO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationApplyResponseXO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


