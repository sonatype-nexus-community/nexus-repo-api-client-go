/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.84.0-03.

API version: 3.84.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"time"
)

// checks if the ReconcilePlanWithDetailsXO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReconcilePlanWithDetailsXO{}

// ReconcilePlanWithDetailsXO struct for ReconcilePlanWithDetailsXO
type ReconcilePlanWithDetailsXO struct {
	Configuration *map[string]string `json:"configuration,omitempty"`
	ContinuationToken *string `json:"continuationToken,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Details []ReconcilePlanDetailsXO `json:"details,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Repository *string `json:"repository,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewReconcilePlanWithDetailsXO instantiates a new ReconcilePlanWithDetailsXO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReconcilePlanWithDetailsXO() *ReconcilePlanWithDetailsXO {
	this := ReconcilePlanWithDetailsXO{}
	return &this
}

// NewReconcilePlanWithDetailsXOWithDefaults instantiates a new ReconcilePlanWithDetailsXO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReconcilePlanWithDetailsXOWithDefaults() *ReconcilePlanWithDetailsXO {
	this := ReconcilePlanWithDetailsXO{}
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *ReconcilePlanWithDetailsXO) GetConfiguration() map[string]string {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]string
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconcilePlanWithDetailsXO) GetConfigurationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *ReconcilePlanWithDetailsXO) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]string and assigns it to the Configuration field.
func (o *ReconcilePlanWithDetailsXO) SetConfiguration(v map[string]string) {
	o.Configuration = &v
}

// GetContinuationToken returns the ContinuationToken field value if set, zero value otherwise.
func (o *ReconcilePlanWithDetailsXO) GetContinuationToken() string {
	if o == nil || IsNil(o.ContinuationToken) {
		var ret string
		return ret
	}
	return *o.ContinuationToken
}

// GetContinuationTokenOk returns a tuple with the ContinuationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconcilePlanWithDetailsXO) GetContinuationTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuationToken) {
		return nil, false
	}
	return o.ContinuationToken, true
}

// HasContinuationToken returns a boolean if a field has been set.
func (o *ReconcilePlanWithDetailsXO) HasContinuationToken() bool {
	if o != nil && !IsNil(o.ContinuationToken) {
		return true
	}

	return false
}

// SetContinuationToken gets a reference to the given string and assigns it to the ContinuationToken field.
func (o *ReconcilePlanWithDetailsXO) SetContinuationToken(v string) {
	o.ContinuationToken = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ReconcilePlanWithDetailsXO) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconcilePlanWithDetailsXO) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ReconcilePlanWithDetailsXO) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ReconcilePlanWithDetailsXO) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ReconcilePlanWithDetailsXO) GetDetails() []ReconcilePlanDetailsXO {
	if o == nil || IsNil(o.Details) {
		var ret []ReconcilePlanDetailsXO
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconcilePlanWithDetailsXO) GetDetailsOk() ([]ReconcilePlanDetailsXO, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ReconcilePlanWithDetailsXO) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []ReconcilePlanDetailsXO and assigns it to the Details field.
func (o *ReconcilePlanWithDetailsXO) SetDetails(v []ReconcilePlanDetailsXO) {
	o.Details = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReconcilePlanWithDetailsXO) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconcilePlanWithDetailsXO) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReconcilePlanWithDetailsXO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReconcilePlanWithDetailsXO) SetId(v int32) {
	o.Id = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *ReconcilePlanWithDetailsXO) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconcilePlanWithDetailsXO) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *ReconcilePlanWithDetailsXO) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *ReconcilePlanWithDetailsXO) SetRepository(v string) {
	o.Repository = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ReconcilePlanWithDetailsXO) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconcilePlanWithDetailsXO) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ReconcilePlanWithDetailsXO) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ReconcilePlanWithDetailsXO) SetState(v string) {
	o.State = &v
}

func (o ReconcilePlanWithDetailsXO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReconcilePlanWithDetailsXO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.ContinuationToken) {
		toSerialize["continuationToken"] = o.ContinuationToken
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableReconcilePlanWithDetailsXO struct {
	value *ReconcilePlanWithDetailsXO
	isSet bool
}

func (v NullableReconcilePlanWithDetailsXO) Get() *ReconcilePlanWithDetailsXO {
	return v.value
}

func (v *NullableReconcilePlanWithDetailsXO) Set(val *ReconcilePlanWithDetailsXO) {
	v.value = val
	v.isSet = true
}

func (v NullableReconcilePlanWithDetailsXO) IsSet() bool {
	return v.isSet
}

func (v *NullableReconcilePlanWithDetailsXO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReconcilePlanWithDetailsXO(val *ReconcilePlanWithDetailsXO) *NullableReconcilePlanWithDetailsXO {
	return &NullableReconcilePlanWithDetailsXO{value: val, isSet: true}
}

func (v NullableReconcilePlanWithDetailsXO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReconcilePlanWithDetailsXO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


