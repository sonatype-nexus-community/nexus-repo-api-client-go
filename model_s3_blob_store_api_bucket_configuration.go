/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.84.0-03.

API version: 3.84.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3BlobStoreApiBucketConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3BlobStoreApiBucketConfiguration{}

// S3BlobStoreApiBucketConfiguration struct for S3BlobStoreApiBucketConfiguration
type S3BlobStoreApiBucketConfiguration struct {
	// The active region based on bucket configuration, failover buckets, and EC2 region Nexus is running.
	ActiveRegion *string `json:"activeRegion,omitempty"`
	AdvancedBucketConnection *S3BlobStoreApiAdvancedBucketConnection `json:"advancedBucketConnection,omitempty"`
	Bucket S3BlobStoreApiBucket `json:"bucket"`
	BucketSecurity *S3BlobStoreApiBucketSecurity `json:"bucketSecurity,omitempty"`
	Encryption *S3BlobStoreApiEncryption `json:"encryption,omitempty"`
	// A list of secondary buckets which have bidirectional replication enabled and should be used when Nexus is running in the region
	FailoverBuckets []S3BlobStoreApiFailoverBucket `json:"failoverBuckets,omitempty"`
	// Whether pre assigned URL is enabled or not.
	PreSignedUrlEnabled *bool `json:"preSignedUrlEnabled,omitempty"`
}

type _S3BlobStoreApiBucketConfiguration S3BlobStoreApiBucketConfiguration

// NewS3BlobStoreApiBucketConfiguration instantiates a new S3BlobStoreApiBucketConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3BlobStoreApiBucketConfiguration(bucket S3BlobStoreApiBucket) *S3BlobStoreApiBucketConfiguration {
	this := S3BlobStoreApiBucketConfiguration{}
	this.Bucket = bucket
	return &this
}

// NewS3BlobStoreApiBucketConfigurationWithDefaults instantiates a new S3BlobStoreApiBucketConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3BlobStoreApiBucketConfigurationWithDefaults() *S3BlobStoreApiBucketConfiguration {
	this := S3BlobStoreApiBucketConfiguration{}
	return &this
}

// GetActiveRegion returns the ActiveRegion field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketConfiguration) GetActiveRegion() string {
	if o == nil || IsNil(o.ActiveRegion) {
		var ret string
		return ret
	}
	return *o.ActiveRegion
}

// GetActiveRegionOk returns a tuple with the ActiveRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketConfiguration) GetActiveRegionOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveRegion) {
		return nil, false
	}
	return o.ActiveRegion, true
}

// HasActiveRegion returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketConfiguration) HasActiveRegion() bool {
	if o != nil && !IsNil(o.ActiveRegion) {
		return true
	}

	return false
}

// SetActiveRegion gets a reference to the given string and assigns it to the ActiveRegion field.
func (o *S3BlobStoreApiBucketConfiguration) SetActiveRegion(v string) {
	o.ActiveRegion = &v
}

// GetAdvancedBucketConnection returns the AdvancedBucketConnection field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketConfiguration) GetAdvancedBucketConnection() S3BlobStoreApiAdvancedBucketConnection {
	if o == nil || IsNil(o.AdvancedBucketConnection) {
		var ret S3BlobStoreApiAdvancedBucketConnection
		return ret
	}
	return *o.AdvancedBucketConnection
}

// GetAdvancedBucketConnectionOk returns a tuple with the AdvancedBucketConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketConfiguration) GetAdvancedBucketConnectionOk() (*S3BlobStoreApiAdvancedBucketConnection, bool) {
	if o == nil || IsNil(o.AdvancedBucketConnection) {
		return nil, false
	}
	return o.AdvancedBucketConnection, true
}

// HasAdvancedBucketConnection returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketConfiguration) HasAdvancedBucketConnection() bool {
	if o != nil && !IsNil(o.AdvancedBucketConnection) {
		return true
	}

	return false
}

// SetAdvancedBucketConnection gets a reference to the given S3BlobStoreApiAdvancedBucketConnection and assigns it to the AdvancedBucketConnection field.
func (o *S3BlobStoreApiBucketConfiguration) SetAdvancedBucketConnection(v S3BlobStoreApiAdvancedBucketConnection) {
	o.AdvancedBucketConnection = &v
}

// GetBucket returns the Bucket field value
func (o *S3BlobStoreApiBucketConfiguration) GetBucket() S3BlobStoreApiBucket {
	if o == nil {
		var ret S3BlobStoreApiBucket
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketConfiguration) GetBucketOk() (*S3BlobStoreApiBucket, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *S3BlobStoreApiBucketConfiguration) SetBucket(v S3BlobStoreApiBucket) {
	o.Bucket = v
}

// GetBucketSecurity returns the BucketSecurity field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketConfiguration) GetBucketSecurity() S3BlobStoreApiBucketSecurity {
	if o == nil || IsNil(o.BucketSecurity) {
		var ret S3BlobStoreApiBucketSecurity
		return ret
	}
	return *o.BucketSecurity
}

// GetBucketSecurityOk returns a tuple with the BucketSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketConfiguration) GetBucketSecurityOk() (*S3BlobStoreApiBucketSecurity, bool) {
	if o == nil || IsNil(o.BucketSecurity) {
		return nil, false
	}
	return o.BucketSecurity, true
}

// HasBucketSecurity returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketConfiguration) HasBucketSecurity() bool {
	if o != nil && !IsNil(o.BucketSecurity) {
		return true
	}

	return false
}

// SetBucketSecurity gets a reference to the given S3BlobStoreApiBucketSecurity and assigns it to the BucketSecurity field.
func (o *S3BlobStoreApiBucketConfiguration) SetBucketSecurity(v S3BlobStoreApiBucketSecurity) {
	o.BucketSecurity = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketConfiguration) GetEncryption() S3BlobStoreApiEncryption {
	if o == nil || IsNil(o.Encryption) {
		var ret S3BlobStoreApiEncryption
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketConfiguration) GetEncryptionOk() (*S3BlobStoreApiEncryption, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketConfiguration) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given S3BlobStoreApiEncryption and assigns it to the Encryption field.
func (o *S3BlobStoreApiBucketConfiguration) SetEncryption(v S3BlobStoreApiEncryption) {
	o.Encryption = &v
}

// GetFailoverBuckets returns the FailoverBuckets field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketConfiguration) GetFailoverBuckets() []S3BlobStoreApiFailoverBucket {
	if o == nil || IsNil(o.FailoverBuckets) {
		var ret []S3BlobStoreApiFailoverBucket
		return ret
	}
	return o.FailoverBuckets
}

// GetFailoverBucketsOk returns a tuple with the FailoverBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketConfiguration) GetFailoverBucketsOk() ([]S3BlobStoreApiFailoverBucket, bool) {
	if o == nil || IsNil(o.FailoverBuckets) {
		return nil, false
	}
	return o.FailoverBuckets, true
}

// HasFailoverBuckets returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketConfiguration) HasFailoverBuckets() bool {
	if o != nil && !IsNil(o.FailoverBuckets) {
		return true
	}

	return false
}

// SetFailoverBuckets gets a reference to the given []S3BlobStoreApiFailoverBucket and assigns it to the FailoverBuckets field.
func (o *S3BlobStoreApiBucketConfiguration) SetFailoverBuckets(v []S3BlobStoreApiFailoverBucket) {
	o.FailoverBuckets = v
}

// GetPreSignedUrlEnabled returns the PreSignedUrlEnabled field value if set, zero value otherwise.
func (o *S3BlobStoreApiBucketConfiguration) GetPreSignedUrlEnabled() bool {
	if o == nil || IsNil(o.PreSignedUrlEnabled) {
		var ret bool
		return ret
	}
	return *o.PreSignedUrlEnabled
}

// GetPreSignedUrlEnabledOk returns a tuple with the PreSignedUrlEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BlobStoreApiBucketConfiguration) GetPreSignedUrlEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PreSignedUrlEnabled) {
		return nil, false
	}
	return o.PreSignedUrlEnabled, true
}

// HasPreSignedUrlEnabled returns a boolean if a field has been set.
func (o *S3BlobStoreApiBucketConfiguration) HasPreSignedUrlEnabled() bool {
	if o != nil && !IsNil(o.PreSignedUrlEnabled) {
		return true
	}

	return false
}

// SetPreSignedUrlEnabled gets a reference to the given bool and assigns it to the PreSignedUrlEnabled field.
func (o *S3BlobStoreApiBucketConfiguration) SetPreSignedUrlEnabled(v bool) {
	o.PreSignedUrlEnabled = &v
}

func (o S3BlobStoreApiBucketConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3BlobStoreApiBucketConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveRegion) {
		toSerialize["activeRegion"] = o.ActiveRegion
	}
	if !IsNil(o.AdvancedBucketConnection) {
		toSerialize["advancedBucketConnection"] = o.AdvancedBucketConnection
	}
	toSerialize["bucket"] = o.Bucket
	if !IsNil(o.BucketSecurity) {
		toSerialize["bucketSecurity"] = o.BucketSecurity
	}
	if !IsNil(o.Encryption) {
		toSerialize["encryption"] = o.Encryption
	}
	if !IsNil(o.FailoverBuckets) {
		toSerialize["failoverBuckets"] = o.FailoverBuckets
	}
	if !IsNil(o.PreSignedUrlEnabled) {
		toSerialize["preSignedUrlEnabled"] = o.PreSignedUrlEnabled
	}
	return toSerialize, nil
}

func (o *S3BlobStoreApiBucketConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3BlobStoreApiBucketConfiguration := _S3BlobStoreApiBucketConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3BlobStoreApiBucketConfiguration)

	if err != nil {
		return err
	}

	*o = S3BlobStoreApiBucketConfiguration(varS3BlobStoreApiBucketConfiguration)

	return err
}

type NullableS3BlobStoreApiBucketConfiguration struct {
	value *S3BlobStoreApiBucketConfiguration
	isSet bool
}

func (v NullableS3BlobStoreApiBucketConfiguration) Get() *S3BlobStoreApiBucketConfiguration {
	return v.value
}

func (v *NullableS3BlobStoreApiBucketConfiguration) Set(val *S3BlobStoreApiBucketConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableS3BlobStoreApiBucketConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableS3BlobStoreApiBucketConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3BlobStoreApiBucketConfiguration(val *S3BlobStoreApiBucketConfiguration) *NullableS3BlobStoreApiBucketConfiguration {
	return &NullableS3BlobStoreApiBucketConfiguration{value: val, isSet: true}
}

func (v NullableS3BlobStoreApiBucketConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3BlobStoreApiBucketConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


