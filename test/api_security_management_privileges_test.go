/*
Sonatype Nexus Repository Manager

Testing SecurityManagementPrivilegesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v3

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatyperepo "github.com/sonatype-nexus-community/nexus-repo-api-client-go/v3"
)

func Test_v3_SecurityManagementPrivilegesAPIService(t *testing.T) {

	configuration := sonatyperepo.NewConfiguration()
	apiClient := sonatyperepo.NewAPIClient(configuration)

	t.Run("Test SecurityManagementPrivilegesAPIService CreateApplicationPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.CreateApplicationPrivilege(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService CreateRepositoryAdminPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.CreateRepositoryAdminPrivilege(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService CreateRepositoryContentSelectorPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.CreateRepositoryContentSelectorPrivilege(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService CreateRepositoryViewPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.CreateRepositoryViewPrivilege(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService CreateScriptPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.CreateScriptPrivilege(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService CreateWildcardPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.CreateWildcardPrivilege(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService DeletePrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeName string

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.DeletePrivilege(context.Background(), privilegeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService GetPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeName string

		resp, httpRes, err := apiClient.SecurityManagementPrivilegesAPI.GetPrivilege(context.Background(), privilegeName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService GetPrivileges1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SecurityManagementPrivilegesAPI.GetPrivileges1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService UpdateApplicationPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeName string

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.UpdateApplicationPrivilege(context.Background(), privilegeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService UpdateRepositoryAdminPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeName string

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.UpdateRepositoryAdminPrivilege(context.Background(), privilegeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService UpdateRepositoryContentSelectorPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeName string

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.UpdateRepositoryContentSelectorPrivilege(context.Background(), privilegeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService UpdateRepositoryViewPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeName string

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.UpdateRepositoryViewPrivilege(context.Background(), privilegeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService UpdateScriptPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeName string

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.UpdateScriptPrivilege(context.Background(), privilegeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityManagementPrivilegesAPIService UpdateWildcardPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeName string

		httpRes, err := apiClient.SecurityManagementPrivilegesAPI.UpdateWildcardPrivilege(context.Background(), privilegeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
