/*
Nexus Repository Manager REST API

Testing RepositoryManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sonatyperepo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatyperepo "github.com/sonatype-nexus-community/nexus-repo-api-client-go"
)

func Test_sonatyperepo_RepositoryManagementAPIService(t *testing.T) {

	configuration := sonatyperepo.NewConfiguration()
	apiClient := sonatyperepo.NewAPIClient(configuration)

	t.Run("Test RepositoryManagementAPIService CreateRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository1(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository10", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository10(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository11", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository11(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository12", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository12(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository13", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository13(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository14", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository14(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository15", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository15(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository16", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository16(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository17", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository17(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository18", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository18(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository19", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository19(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository2(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository20", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository20(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository21", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository21(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository22", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository22(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository23", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository23(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository24", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository24(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository25", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository25(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository26", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository26(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository27", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository27(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository28", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository28(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository29", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository29(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository3(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository30", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository30(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository31", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository31(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository32", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository32(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository33", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository33(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository34", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository34(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository35", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository35(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository36", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository36(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository37", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository37(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository38", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository38(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository39", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository39(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository4", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository4(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository40", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository40(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository5(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository6", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository6(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository7", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository7(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository8", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository8(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRepository9", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRepository9(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService DeleteRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.DeleteRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService DisableRepositoryHealthCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.DisableRepositoryHealthCheck(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService EnableRepositoryHealthCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.EnableRepositoryHealthCheck(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepositories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepositories1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepositories1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository1(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository10", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository10(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository11", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository11(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository12", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository12(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository13", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository13(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository14", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository14(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository15", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository15(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository16", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository16(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository17", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository17(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository18", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository18(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository19", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository19(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository2(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository20", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository20(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository21", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository21(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository22", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository22(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository23", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository23(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository24", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository24(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository25", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository25(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository26", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository26(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository27", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository27(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository28", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository28(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository29", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository29(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository3(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository30", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository30(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository31", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository31(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository32", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository32(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository33", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository33(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository34", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository34(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository35", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository35(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository36", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository36(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository37", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository37(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository38", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository38(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository39", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository39(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository4", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository4(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository40", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository40(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository41", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository41(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository5(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository6", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository6(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository7", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository7(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository8", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository8(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository9", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository9(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService InvalidateCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.InvalidateCache(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService RebuildIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.RebuildIndex(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository1(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository10", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository10(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository11", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository11(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository12", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository12(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository13", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository13(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository14", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository14(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository15", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository15(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository16", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository16(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository17", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository17(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository18", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository18(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository19", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository19(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository2(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository20", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository20(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository21", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository21(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository22", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository22(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository23", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository23(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository24", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository24(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository25", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository25(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository26", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository26(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository27", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository27(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository28", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository28(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository29", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository29(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository3(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository30", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository30(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository31", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository31(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository32", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository32(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository33", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository33(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository34", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository34(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository35", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository35(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository36", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository36(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository37", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository37(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository38", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository38(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository39", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository39(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository4", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository4(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository40", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository40(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository5(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository6", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository6(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository7", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository7(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository8", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository8(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRepository9", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRepository9(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
