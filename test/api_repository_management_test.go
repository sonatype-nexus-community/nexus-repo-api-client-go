/*
Sonatype Nexus Repository Manager

Testing RepositoryManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v3

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatyperepo "github.com/sonatype-nexus-community/nexus-repo-api-client-go/v3"
)

func Test_v3_RepositoryManagementAPIService(t *testing.T) {

	configuration := sonatyperepo.NewConfiguration()
	apiClient := sonatyperepo.NewAPIClient(configuration)

	t.Run("Test RepositoryManagementAPIService CreateAptHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateAptHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateAptProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateAptProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateCargoGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateCargoGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateCargoHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateCargoHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateCargoProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateCargoProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateCocoapodsProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateCocoapodsProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateComposerProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateComposerProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateConanGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateConanGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateConanHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateConanHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateConanProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateConanProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateCondaProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateCondaProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateDockerGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateDockerGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateDockerHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateDockerHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateDockerProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateDockerProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateGitlfsHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateGitlfsHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateGoGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateGoGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateGoProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateGoProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateHelmHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateHelmHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateHelmProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateHelmProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateHuggingfaceProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateHuggingfaceProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateMavenGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateMavenGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateMavenHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateMavenHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateMavenProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateMavenProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateNpmGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateNpmGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateNpmHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateNpmHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateNpmProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateNpmProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateNugetGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateNugetGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateNugetHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateNugetHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateNugetProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateNugetProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateP2ProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateP2ProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreatePypiGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreatePypiGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreatePypiHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreatePypiHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreatePypiProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreatePypiProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRawGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRawGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRawHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRawHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRawProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRawProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRubygemsGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRubygemsGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRubygemsHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRubygemsHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateRubygemsProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateRubygemsProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateYumGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateYumGroupRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateYumHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateYumHostedRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreateYumProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RepositoryManagementAPI.CreateYumProxyRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreaterepositorynameHealthCheckRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.CreaterepositorynameHealthCheckRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreaterepositorynameInvalidateCacheRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.CreaterepositorynameInvalidateCacheRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService CreaterepositorynameRebuildIndexRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.CreaterepositorynameRebuildIndexRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService DeleteRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.DeleteRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService DisableRepositoryHealthCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.DisableRepositoryHealthCheck(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetAllRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetAllRepositories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetAptHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetAptHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetAptProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetAptProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetCargoGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetCargoGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetCargoHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetCargoHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetCargoProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetCargoProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetCocoapodsProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetCocoapodsProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetComposerProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetComposerProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetConanGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetConanGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetConanHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetConanHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetConanProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetConanProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetCondaProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetCondaProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetDockerGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetDockerGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetDockerHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetDockerHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetDockerProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetDockerProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetGitlfsHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetGitlfsHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetGoGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetGoGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetGoProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetGoProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetHelmHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetHelmHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetHelmProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetHelmProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetHuggingfaceProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetHuggingfaceProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetMavenGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetMavenGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetMavenHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetMavenHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetMavenProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetMavenProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetNpmGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetNpmGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetNpmHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetNpmHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetNpmProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetNpmProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetNugetGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetNugetGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetNugetHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetNugetHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetNugetProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetNugetProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetP2ProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetP2ProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetPypiGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetPypiGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetPypiHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetPypiHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetPypiProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetPypiProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRawGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRawGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRawHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRawHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRawProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRawProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepositories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRubygemsGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRubygemsGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRubygemsHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRubygemsHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetRubygemsProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetRubygemsProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetYumGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetYumGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetYumHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetYumHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService GetYumProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		resp, httpRes, err := apiClient.RepositoryManagementAPI.GetYumProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateAptHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateAptHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateAptProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateAptProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateCargoGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateCargoGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateCargoHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateCargoHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateCargoProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateCargoProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateCocoapodsProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateCocoapodsProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateComposerProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateComposerProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateConanGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateConanGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateConanHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateConanHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateConanProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateConanProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateCondaProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateCondaProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateDockerGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateDockerGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateDockerHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateDockerHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateDockerProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateDockerProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateGitlfsHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateGitlfsHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateGoGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateGoGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateGoProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateGoProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateHelmHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateHelmHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateHelmProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateHelmProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateHuggingfaceProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateHuggingfaceProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateMavenGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateMavenGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateMavenHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateMavenHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateMavenProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateMavenProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateNpmGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateNpmGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateNpmHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateNpmHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateNpmProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateNpmProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateNugetGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateNugetGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateNugetHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateNugetHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateNugetProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateNugetProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateP2ProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateP2ProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdatePypiGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdatePypiGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdatePypiHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdatePypiHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdatePypiProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdatePypiProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRawGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRawGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRawHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRawHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRawProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRawProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRubygemsGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRubygemsGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRubygemsHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRubygemsHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateRubygemsProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateRubygemsProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateYumGroupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateYumGroupRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateYumHostedRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateYumHostedRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryManagementAPIService UpdateYumProxyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryName string

		httpRes, err := apiClient.RepositoryManagementAPI.UpdateYumProxyRepository(context.Background(), repositoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
