/*
Nexus Repository Manager REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.67.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostedStorageAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostedStorageAttributes{}

// HostedStorageAttributes struct for HostedStorageAttributes
type HostedStorageAttributes struct {
	// Blob store used to store repository contents
	BlobStoreName string `json:"blobStoreName"`
	// Whether to validate uploaded content's MIME type appropriate for the repository format
	StrictContentTypeValidation bool `json:"strictContentTypeValidation"`
	// Controls if deployments of and updates to assets are allowed
	WritePolicy string `json:"writePolicy"`
}

type _HostedStorageAttributes HostedStorageAttributes

// NewHostedStorageAttributes instantiates a new HostedStorageAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostedStorageAttributes(blobStoreName string, strictContentTypeValidation bool, writePolicy string) *HostedStorageAttributes {
	this := HostedStorageAttributes{}
	this.BlobStoreName = blobStoreName
	this.StrictContentTypeValidation = strictContentTypeValidation
	this.WritePolicy = writePolicy
	return &this
}

// NewHostedStorageAttributesWithDefaults instantiates a new HostedStorageAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostedStorageAttributesWithDefaults() *HostedStorageAttributes {
	this := HostedStorageAttributes{}
	return &this
}

// GetBlobStoreName returns the BlobStoreName field value
func (o *HostedStorageAttributes) GetBlobStoreName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobStoreName
}

// GetBlobStoreNameOk returns a tuple with the BlobStoreName field value
// and a boolean to check if the value has been set.
func (o *HostedStorageAttributes) GetBlobStoreNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlobStoreName, true
}

// SetBlobStoreName sets field value
func (o *HostedStorageAttributes) SetBlobStoreName(v string) {
	o.BlobStoreName = v
}

// GetStrictContentTypeValidation returns the StrictContentTypeValidation field value
func (o *HostedStorageAttributes) GetStrictContentTypeValidation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StrictContentTypeValidation
}

// GetStrictContentTypeValidationOk returns a tuple with the StrictContentTypeValidation field value
// and a boolean to check if the value has been set.
func (o *HostedStorageAttributes) GetStrictContentTypeValidationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StrictContentTypeValidation, true
}

// SetStrictContentTypeValidation sets field value
func (o *HostedStorageAttributes) SetStrictContentTypeValidation(v bool) {
	o.StrictContentTypeValidation = v
}

// GetWritePolicy returns the WritePolicy field value
func (o *HostedStorageAttributes) GetWritePolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WritePolicy
}

// GetWritePolicyOk returns a tuple with the WritePolicy field value
// and a boolean to check if the value has been set.
func (o *HostedStorageAttributes) GetWritePolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WritePolicy, true
}

// SetWritePolicy sets field value
func (o *HostedStorageAttributes) SetWritePolicy(v string) {
	o.WritePolicy = v
}

func (o HostedStorageAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostedStorageAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blobStoreName"] = o.BlobStoreName
	toSerialize["strictContentTypeValidation"] = o.StrictContentTypeValidation
	toSerialize["writePolicy"] = o.WritePolicy
	return toSerialize, nil
}

func (o *HostedStorageAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blobStoreName",
		"strictContentTypeValidation",
		"writePolicy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostedStorageAttributes := _HostedStorageAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostedStorageAttributes)

	if err != nil {
		return err
	}

	*o = HostedStorageAttributes(varHostedStorageAttributes)

	return err
}

type NullableHostedStorageAttributes struct {
	value *HostedStorageAttributes
	isSet bool
}

func (v NullableHostedStorageAttributes) Get() *HostedStorageAttributes {
	return v.value
}

func (v *NullableHostedStorageAttributes) Set(val *HostedStorageAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableHostedStorageAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableHostedStorageAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostedStorageAttributes(val *HostedStorageAttributes) *NullableHostedStorageAttributes {
	return &NullableHostedStorageAttributes{value: val, isSet: true}
}

func (v NullableHostedStorageAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostedStorageAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


