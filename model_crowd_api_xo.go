/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

API version: 3.85.0-03
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CrowdApiXO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrowdApiXO{}

// CrowdApiXO struct for CrowdApiXO
type CrowdApiXO struct {
	ApplicationName *string `json:"applicationName,omitempty"`
	ApplicationPassword *string `json:"applicationPassword,omitempty"`
	Enabled bool `json:"enabled"`
	RealmActive bool `json:"realmActive"`
	Timeout *int32 `json:"timeout,omitempty"`
	Url *string `json:"url,omitempty"`
	UseTrustStoreForUrl *bool `json:"useTrustStoreForUrl,omitempty"`
}

type _CrowdApiXO CrowdApiXO

// NewCrowdApiXO instantiates a new CrowdApiXO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrowdApiXO(enabled bool, realmActive bool) *CrowdApiXO {
	this := CrowdApiXO{}
	this.Enabled = enabled
	this.RealmActive = realmActive
	return &this
}

// NewCrowdApiXOWithDefaults instantiates a new CrowdApiXO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrowdApiXOWithDefaults() *CrowdApiXO {
	this := CrowdApiXO{}
	return &this
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *CrowdApiXO) GetApplicationName() string {
	if o == nil || IsNil(o.ApplicationName) {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdApiXO) GetApplicationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *CrowdApiXO) HasApplicationName() bool {
	if o != nil && !IsNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *CrowdApiXO) SetApplicationName(v string) {
	o.ApplicationName = &v
}

// GetApplicationPassword returns the ApplicationPassword field value if set, zero value otherwise.
func (o *CrowdApiXO) GetApplicationPassword() string {
	if o == nil || IsNil(o.ApplicationPassword) {
		var ret string
		return ret
	}
	return *o.ApplicationPassword
}

// GetApplicationPasswordOk returns a tuple with the ApplicationPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdApiXO) GetApplicationPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationPassword) {
		return nil, false
	}
	return o.ApplicationPassword, true
}

// HasApplicationPassword returns a boolean if a field has been set.
func (o *CrowdApiXO) HasApplicationPassword() bool {
	if o != nil && !IsNil(o.ApplicationPassword) {
		return true
	}

	return false
}

// SetApplicationPassword gets a reference to the given string and assigns it to the ApplicationPassword field.
func (o *CrowdApiXO) SetApplicationPassword(v string) {
	o.ApplicationPassword = &v
}

// GetEnabled returns the Enabled field value
func (o *CrowdApiXO) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CrowdApiXO) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CrowdApiXO) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRealmActive returns the RealmActive field value
func (o *CrowdApiXO) GetRealmActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RealmActive
}

// GetRealmActiveOk returns a tuple with the RealmActive field value
// and a boolean to check if the value has been set.
func (o *CrowdApiXO) GetRealmActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RealmActive, true
}

// SetRealmActive sets field value
func (o *CrowdApiXO) SetRealmActive(v bool) {
	o.RealmActive = v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *CrowdApiXO) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdApiXO) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *CrowdApiXO) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *CrowdApiXO) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CrowdApiXO) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdApiXO) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CrowdApiXO) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CrowdApiXO) SetUrl(v string) {
	o.Url = &v
}

// GetUseTrustStoreForUrl returns the UseTrustStoreForUrl field value if set, zero value otherwise.
func (o *CrowdApiXO) GetUseTrustStoreForUrl() bool {
	if o == nil || IsNil(o.UseTrustStoreForUrl) {
		var ret bool
		return ret
	}
	return *o.UseTrustStoreForUrl
}

// GetUseTrustStoreForUrlOk returns a tuple with the UseTrustStoreForUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdApiXO) GetUseTrustStoreForUrlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTrustStoreForUrl) {
		return nil, false
	}
	return o.UseTrustStoreForUrl, true
}

// HasUseTrustStoreForUrl returns a boolean if a field has been set.
func (o *CrowdApiXO) HasUseTrustStoreForUrl() bool {
	if o != nil && !IsNil(o.UseTrustStoreForUrl) {
		return true
	}

	return false
}

// SetUseTrustStoreForUrl gets a reference to the given bool and assigns it to the UseTrustStoreForUrl field.
func (o *CrowdApiXO) SetUseTrustStoreForUrl(v bool) {
	o.UseTrustStoreForUrl = &v
}

func (o CrowdApiXO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrowdApiXO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationName) {
		toSerialize["applicationName"] = o.ApplicationName
	}
	if !IsNil(o.ApplicationPassword) {
		toSerialize["applicationPassword"] = o.ApplicationPassword
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["realmActive"] = o.RealmActive
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UseTrustStoreForUrl) {
		toSerialize["useTrustStoreForUrl"] = o.UseTrustStoreForUrl
	}
	return toSerialize, nil
}

func (o *CrowdApiXO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"realmActive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrowdApiXO := _CrowdApiXO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCrowdApiXO)

	if err != nil {
		return err
	}

	*o = CrowdApiXO(varCrowdApiXO)

	return err
}

type NullableCrowdApiXO struct {
	value *CrowdApiXO
	isSet bool
}

func (v NullableCrowdApiXO) Get() *CrowdApiXO {
	return v.value
}

func (v *NullableCrowdApiXO) Set(val *CrowdApiXO) {
	v.value = val
	v.isSet = true
}

func (v NullableCrowdApiXO) IsSet() bool {
	return v.isSet
}

func (v *NullableCrowdApiXO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrowdApiXO(val *CrowdApiXO) *NullableCrowdApiXO {
	return &NullableCrowdApiXO{value: val, isSet: true}
}

func (v NullableCrowdApiXO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrowdApiXO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


