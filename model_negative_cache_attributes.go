/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.68.1-02.

API version: 3.68.1-02
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatyperepo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NegativeCacheAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NegativeCacheAttributes{}

// NegativeCacheAttributes struct for NegativeCacheAttributes
type NegativeCacheAttributes struct {
	// Whether to cache responses for content not present in the proxied repository
	Enabled bool `json:"enabled"`
	// How long to cache the fact that a file was not found in the repository (in minutes)
	TimeToLive int32 `json:"timeToLive"`
}

type _NegativeCacheAttributes NegativeCacheAttributes

// NewNegativeCacheAttributes instantiates a new NegativeCacheAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegativeCacheAttributes(enabled bool, timeToLive int32) *NegativeCacheAttributes {
	this := NegativeCacheAttributes{}
	this.Enabled = enabled
	this.TimeToLive = timeToLive
	return &this
}

// NewNegativeCacheAttributesWithDefaults instantiates a new NegativeCacheAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegativeCacheAttributesWithDefaults() *NegativeCacheAttributes {
	this := NegativeCacheAttributes{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *NegativeCacheAttributes) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *NegativeCacheAttributes) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *NegativeCacheAttributes) SetEnabled(v bool) {
	o.Enabled = v
}

// GetTimeToLive returns the TimeToLive field value
func (o *NegativeCacheAttributes) GetTimeToLive() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimeToLive
}

// GetTimeToLiveOk returns a tuple with the TimeToLive field value
// and a boolean to check if the value has been set.
func (o *NegativeCacheAttributes) GetTimeToLiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeToLive, true
}

// SetTimeToLive sets field value
func (o *NegativeCacheAttributes) SetTimeToLive(v int32) {
	o.TimeToLive = v
}

func (o NegativeCacheAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NegativeCacheAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["timeToLive"] = o.TimeToLive
	return toSerialize, nil
}

func (o *NegativeCacheAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"timeToLive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNegativeCacheAttributes := _NegativeCacheAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNegativeCacheAttributes)

	if err != nil {
		return err
	}

	*o = NegativeCacheAttributes(varNegativeCacheAttributes)

	return err
}

type NullableNegativeCacheAttributes struct {
	value *NegativeCacheAttributes
	isSet bool
}

func (v NullableNegativeCacheAttributes) Get() *NegativeCacheAttributes {
	return v.value
}

func (v *NullableNegativeCacheAttributes) Set(val *NegativeCacheAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableNegativeCacheAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableNegativeCacheAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegativeCacheAttributes(val *NegativeCacheAttributes) *NullableNegativeCacheAttributes {
	return &NullableNegativeCacheAttributes{value: val, isSet: true}
}

func (v NullableNegativeCacheAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegativeCacheAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


