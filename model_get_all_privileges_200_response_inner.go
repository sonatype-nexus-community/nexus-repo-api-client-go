/*
Sonatype Nexus Repository Manager

This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.81.1-01.

API version: 3.81.1-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetAllPrivileges200ResponseInner - struct for GetAllPrivileges200ResponseInner
type GetAllPrivileges200ResponseInner struct {
	ApiPrivilege *ApiPrivilege
	ApiPrivilegeApplicationRequest *ApiPrivilegeApplicationRequest
	ApiPrivilegeRepositoryAdminRequest *ApiPrivilegeRepositoryAdminRequest
	ApiPrivilegeRepositoryContentSelectorRequest *ApiPrivilegeRepositoryContentSelectorRequest
	ApiPrivilegeRepositoryViewRequest *ApiPrivilegeRepositoryViewRequest
	ApiPrivilegeScriptRequest *ApiPrivilegeScriptRequest
	ApiPrivilegeWildcardRequest *ApiPrivilegeWildcardRequest
}

// ApiPrivilegeAsGetAllPrivileges200ResponseInner is a convenience function that returns ApiPrivilege wrapped in GetAllPrivileges200ResponseInner
func ApiPrivilegeAsGetAllPrivileges200ResponseInner(v *ApiPrivilege) GetAllPrivileges200ResponseInner {
	return GetAllPrivileges200ResponseInner{
		ApiPrivilege: v,
	}
}

// ApiPrivilegeApplicationRequestAsGetAllPrivileges200ResponseInner is a convenience function that returns ApiPrivilegeApplicationRequest wrapped in GetAllPrivileges200ResponseInner
func ApiPrivilegeApplicationRequestAsGetAllPrivileges200ResponseInner(v *ApiPrivilegeApplicationRequest) GetAllPrivileges200ResponseInner {
	return GetAllPrivileges200ResponseInner{
		ApiPrivilegeApplicationRequest: v,
	}
}

// ApiPrivilegeRepositoryAdminRequestAsGetAllPrivileges200ResponseInner is a convenience function that returns ApiPrivilegeRepositoryAdminRequest wrapped in GetAllPrivileges200ResponseInner
func ApiPrivilegeRepositoryAdminRequestAsGetAllPrivileges200ResponseInner(v *ApiPrivilegeRepositoryAdminRequest) GetAllPrivileges200ResponseInner {
	return GetAllPrivileges200ResponseInner{
		ApiPrivilegeRepositoryAdminRequest: v,
	}
}

// ApiPrivilegeRepositoryContentSelectorRequestAsGetAllPrivileges200ResponseInner is a convenience function that returns ApiPrivilegeRepositoryContentSelectorRequest wrapped in GetAllPrivileges200ResponseInner
func ApiPrivilegeRepositoryContentSelectorRequestAsGetAllPrivileges200ResponseInner(v *ApiPrivilegeRepositoryContentSelectorRequest) GetAllPrivileges200ResponseInner {
	return GetAllPrivileges200ResponseInner{
		ApiPrivilegeRepositoryContentSelectorRequest: v,
	}
}

// ApiPrivilegeRepositoryViewRequestAsGetAllPrivileges200ResponseInner is a convenience function that returns ApiPrivilegeRepositoryViewRequest wrapped in GetAllPrivileges200ResponseInner
func ApiPrivilegeRepositoryViewRequestAsGetAllPrivileges200ResponseInner(v *ApiPrivilegeRepositoryViewRequest) GetAllPrivileges200ResponseInner {
	return GetAllPrivileges200ResponseInner{
		ApiPrivilegeRepositoryViewRequest: v,
	}
}

// ApiPrivilegeScriptRequestAsGetAllPrivileges200ResponseInner is a convenience function that returns ApiPrivilegeScriptRequest wrapped in GetAllPrivileges200ResponseInner
func ApiPrivilegeScriptRequestAsGetAllPrivileges200ResponseInner(v *ApiPrivilegeScriptRequest) GetAllPrivileges200ResponseInner {
	return GetAllPrivileges200ResponseInner{
		ApiPrivilegeScriptRequest: v,
	}
}

// ApiPrivilegeWildcardRequestAsGetAllPrivileges200ResponseInner is a convenience function that returns ApiPrivilegeWildcardRequest wrapped in GetAllPrivileges200ResponseInner
func ApiPrivilegeWildcardRequestAsGetAllPrivileges200ResponseInner(v *ApiPrivilegeWildcardRequest) GetAllPrivileges200ResponseInner {
	return GetAllPrivileges200ResponseInner{
		ApiPrivilegeWildcardRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAllPrivileges200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiPrivilege
	err = newStrictDecoder(data).Decode(&dst.ApiPrivilege)
	if err == nil {
		jsonApiPrivilege, _ := json.Marshal(dst.ApiPrivilege)
		if string(jsonApiPrivilege) == "{}" { // empty struct
			dst.ApiPrivilege = nil
		} else {
			if err = validator.Validate(dst.ApiPrivilege); err != nil {
				dst.ApiPrivilege = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiPrivilege = nil
	}

	// try to unmarshal data into ApiPrivilegeApplicationRequest
	err = newStrictDecoder(data).Decode(&dst.ApiPrivilegeApplicationRequest)
	if err == nil {
		jsonApiPrivilegeApplicationRequest, _ := json.Marshal(dst.ApiPrivilegeApplicationRequest)
		if string(jsonApiPrivilegeApplicationRequest) == "{}" { // empty struct
			dst.ApiPrivilegeApplicationRequest = nil
		} else {
			if err = validator.Validate(dst.ApiPrivilegeApplicationRequest); err != nil {
				dst.ApiPrivilegeApplicationRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiPrivilegeApplicationRequest = nil
	}

	// try to unmarshal data into ApiPrivilegeRepositoryAdminRequest
	err = newStrictDecoder(data).Decode(&dst.ApiPrivilegeRepositoryAdminRequest)
	if err == nil {
		jsonApiPrivilegeRepositoryAdminRequest, _ := json.Marshal(dst.ApiPrivilegeRepositoryAdminRequest)
		if string(jsonApiPrivilegeRepositoryAdminRequest) == "{}" { // empty struct
			dst.ApiPrivilegeRepositoryAdminRequest = nil
		} else {
			if err = validator.Validate(dst.ApiPrivilegeRepositoryAdminRequest); err != nil {
				dst.ApiPrivilegeRepositoryAdminRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiPrivilegeRepositoryAdminRequest = nil
	}

	// try to unmarshal data into ApiPrivilegeRepositoryContentSelectorRequest
	err = newStrictDecoder(data).Decode(&dst.ApiPrivilegeRepositoryContentSelectorRequest)
	if err == nil {
		jsonApiPrivilegeRepositoryContentSelectorRequest, _ := json.Marshal(dst.ApiPrivilegeRepositoryContentSelectorRequest)
		if string(jsonApiPrivilegeRepositoryContentSelectorRequest) == "{}" { // empty struct
			dst.ApiPrivilegeRepositoryContentSelectorRequest = nil
		} else {
			if err = validator.Validate(dst.ApiPrivilegeRepositoryContentSelectorRequest); err != nil {
				dst.ApiPrivilegeRepositoryContentSelectorRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiPrivilegeRepositoryContentSelectorRequest = nil
	}

	// try to unmarshal data into ApiPrivilegeRepositoryViewRequest
	err = newStrictDecoder(data).Decode(&dst.ApiPrivilegeRepositoryViewRequest)
	if err == nil {
		jsonApiPrivilegeRepositoryViewRequest, _ := json.Marshal(dst.ApiPrivilegeRepositoryViewRequest)
		if string(jsonApiPrivilegeRepositoryViewRequest) == "{}" { // empty struct
			dst.ApiPrivilegeRepositoryViewRequest = nil
		} else {
			if err = validator.Validate(dst.ApiPrivilegeRepositoryViewRequest); err != nil {
				dst.ApiPrivilegeRepositoryViewRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiPrivilegeRepositoryViewRequest = nil
	}

	// try to unmarshal data into ApiPrivilegeScriptRequest
	err = newStrictDecoder(data).Decode(&dst.ApiPrivilegeScriptRequest)
	if err == nil {
		jsonApiPrivilegeScriptRequest, _ := json.Marshal(dst.ApiPrivilegeScriptRequest)
		if string(jsonApiPrivilegeScriptRequest) == "{}" { // empty struct
			dst.ApiPrivilegeScriptRequest = nil
		} else {
			if err = validator.Validate(dst.ApiPrivilegeScriptRequest); err != nil {
				dst.ApiPrivilegeScriptRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiPrivilegeScriptRequest = nil
	}

	// try to unmarshal data into ApiPrivilegeWildcardRequest
	err = newStrictDecoder(data).Decode(&dst.ApiPrivilegeWildcardRequest)
	if err == nil {
		jsonApiPrivilegeWildcardRequest, _ := json.Marshal(dst.ApiPrivilegeWildcardRequest)
		if string(jsonApiPrivilegeWildcardRequest) == "{}" { // empty struct
			dst.ApiPrivilegeWildcardRequest = nil
		} else {
			if err = validator.Validate(dst.ApiPrivilegeWildcardRequest); err != nil {
				dst.ApiPrivilegeWildcardRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiPrivilegeWildcardRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiPrivilege = nil
		dst.ApiPrivilegeApplicationRequest = nil
		dst.ApiPrivilegeRepositoryAdminRequest = nil
		dst.ApiPrivilegeRepositoryContentSelectorRequest = nil
		dst.ApiPrivilegeRepositoryViewRequest = nil
		dst.ApiPrivilegeScriptRequest = nil
		dst.ApiPrivilegeWildcardRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAllPrivileges200ResponseInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAllPrivileges200ResponseInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAllPrivileges200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.ApiPrivilege != nil {
		return json.Marshal(&src.ApiPrivilege)
	}

	if src.ApiPrivilegeApplicationRequest != nil {
		return json.Marshal(&src.ApiPrivilegeApplicationRequest)
	}

	if src.ApiPrivilegeRepositoryAdminRequest != nil {
		return json.Marshal(&src.ApiPrivilegeRepositoryAdminRequest)
	}

	if src.ApiPrivilegeRepositoryContentSelectorRequest != nil {
		return json.Marshal(&src.ApiPrivilegeRepositoryContentSelectorRequest)
	}

	if src.ApiPrivilegeRepositoryViewRequest != nil {
		return json.Marshal(&src.ApiPrivilegeRepositoryViewRequest)
	}

	if src.ApiPrivilegeScriptRequest != nil {
		return json.Marshal(&src.ApiPrivilegeScriptRequest)
	}

	if src.ApiPrivilegeWildcardRequest != nil {
		return json.Marshal(&src.ApiPrivilegeWildcardRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAllPrivileges200ResponseInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiPrivilege != nil {
		return obj.ApiPrivilege
	}

	if obj.ApiPrivilegeApplicationRequest != nil {
		return obj.ApiPrivilegeApplicationRequest
	}

	if obj.ApiPrivilegeRepositoryAdminRequest != nil {
		return obj.ApiPrivilegeRepositoryAdminRequest
	}

	if obj.ApiPrivilegeRepositoryContentSelectorRequest != nil {
		return obj.ApiPrivilegeRepositoryContentSelectorRequest
	}

	if obj.ApiPrivilegeRepositoryViewRequest != nil {
		return obj.ApiPrivilegeRepositoryViewRequest
	}

	if obj.ApiPrivilegeScriptRequest != nil {
		return obj.ApiPrivilegeScriptRequest
	}

	if obj.ApiPrivilegeWildcardRequest != nil {
		return obj.ApiPrivilegeWildcardRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetAllPrivileges200ResponseInner) GetActualInstanceValue() (interface{}) {
	if obj.ApiPrivilege != nil {
		return *obj.ApiPrivilege
	}

	if obj.ApiPrivilegeApplicationRequest != nil {
		return *obj.ApiPrivilegeApplicationRequest
	}

	if obj.ApiPrivilegeRepositoryAdminRequest != nil {
		return *obj.ApiPrivilegeRepositoryAdminRequest
	}

	if obj.ApiPrivilegeRepositoryContentSelectorRequest != nil {
		return *obj.ApiPrivilegeRepositoryContentSelectorRequest
	}

	if obj.ApiPrivilegeRepositoryViewRequest != nil {
		return *obj.ApiPrivilegeRepositoryViewRequest
	}

	if obj.ApiPrivilegeScriptRequest != nil {
		return *obj.ApiPrivilegeScriptRequest
	}

	if obj.ApiPrivilegeWildcardRequest != nil {
		return *obj.ApiPrivilegeWildcardRequest
	}

	// all schemas are nil
	return nil
}

type NullableGetAllPrivileges200ResponseInner struct {
	value *GetAllPrivileges200ResponseInner
	isSet bool
}

func (v NullableGetAllPrivileges200ResponseInner) Get() *GetAllPrivileges200ResponseInner {
	return v.value
}

func (v *NullableGetAllPrivileges200ResponseInner) Set(val *GetAllPrivileges200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllPrivileges200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllPrivileges200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllPrivileges200ResponseInner(val *GetAllPrivileges200ResponseInner) *NullableGetAllPrivileges200ResponseInner {
	return &NullableGetAllPrivileges200ResponseInner{value: val, isSet: true}
}

func (v NullableGetAllPrivileges200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllPrivileges200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


